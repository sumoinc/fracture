// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Files .projen/tasks.json 1`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \\"npx projen\\".",
  "env": Object {
    "PATH": "$(pnpm -c exec \\"node --print process.env.PATH\\")",
  },
  "tasks": Object {
    "bootstrap": Object {
      "name": "bootstrap",
    },
    "build": Object {
      "description": "Full release build",
      "name": "build",
      "steps": Array [
        Object {
          "spawn": "default",
        },
        Object {
          "spawn": "pre-compile",
        },
        Object {
          "spawn": "compile",
        },
        Object {
          "spawn": "post-compile",
        },
        Object {
          "spawn": "test",
        },
        Object {
          "spawn": "package",
        },
      ],
    },
    "bump": Object {
      "condition": "! git log --oneline -1 | grep -q \\"chore(release):\\"",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": Object {
        "BUMPFILE": "dist/version.txt",
        "CHANGELOG": "dist/changelog.md",
        "OUTFILE": "package.json",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
      },
      "name": "bump",
      "steps": Array [
        Object {
          "builtin": "release/bump-version",
        },
      ],
    },
    "checkup": Object {
      "condition": "[ ! -n \\"$CI\\" ]",
      "description": "Runs everythiung but sso-login to make sure all environments are healthy and bootstrapped properly.",
      "name": "checkup",
      "steps": Array [
        Object {
          "spawn": "profiles",
        },
        Object {
          "spawn": "bootstrap",
        },
      ],
    },
    "clobber": Object {
      "condition": "git diff --exit-code > /dev/null",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": Object {
        "BRANCH": "$(git branch --show-current)",
      },
      "name": "clobber",
      "steps": Array [
        Object {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \\"scratch\\" branch",
        },
        Object {
          "exec": "git checkout $BRANCH",
        },
        Object {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin",
        },
        Object {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit",
        },
        Object {
          "exec": "git clean -fdx",
          "name": "clean all untracked files",
        },
        Object {
          "say": "ready to rock! (unpushed commits are under the \\"scratch\\" branch)",
        },
      ],
    },
    "compile": Object {
      "description": "Only compile",
      "name": "compile",
      "steps": Array [
        Object {
          "exec": "tsc --build",
        },
      ],
    },
    "default": Object {
      "description": "Synthesize project files",
      "name": "default",
      "steps": Array [
        Object {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts",
        },
      ],
    },
    "eject": Object {
      "description": "Remove projen from the project",
      "env": Object {
        "PROJEN_EJECTING": "true",
      },
      "name": "eject",
      "steps": Array [
        Object {
          "spawn": "default",
        },
      ],
    },
    "eslint": Object {
      "description": "Runs eslint against the codebase",
      "name": "eslint",
      "steps": Array [
        Object {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern $@ src test build-tools projenrc .projenrc.ts",
          "receiveArgs": true,
        },
      ],
    },
    "install": Object {
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "name": "install",
      "steps": Array [
        Object {
          "exec": "pnpm i --no-frozen-lockfile",
        },
      ],
    },
    "install:ci": Object {
      "description": "Install project dependencies using frozen lockfile",
      "name": "install:ci",
      "steps": Array [
        Object {
          "exec": "pnpm i --frozen-lockfile",
        },
      ],
    },
    "package": Object {
      "description": "Creates the distribution package",
      "name": "package",
      "steps": Array [
        Object {
          "exec": "mkdir -p dist/js",
        },
        Object {
          "exec": "mv $(pnpm pack) dist/js/",
        },
      ],
    },
    "post-compile": Object {
      "description": "Runs after successful compilation",
      "name": "post-compile",
    },
    "post-upgrade": Object {
      "description": "Runs after upgrading dependencies",
      "name": "post-upgrade",
    },
    "pre-compile": Object {
      "description": "Prepare the project for compilation",
      "name": "pre-compile",
    },
    "profiles": Object {
      "name": "profiles",
    },
    "release": Object {
      "description": "Prepare a release from \\"main\\" branch",
      "env": Object {
        "RELEASE": "true",
      },
      "name": "release",
      "steps": Array [
        Object {
          "exec": "rm -fr dist",
        },
        Object {
          "spawn": "bump",
        },
        Object {
          "spawn": "build",
        },
        Object {
          "spawn": "unbump",
        },
        Object {
          "exec": "git diff --ignore-space-at-eol --exit-code",
        },
      ],
    },
    "test": Object {
      "description": "Run tests",
      "name": "test",
      "steps": Array [
        Object {
          "spawn": "eslint",
        },
        Object {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true,
        },
      ],
    },
    "test:watch": Object {
      "description": "Run jest in watch mode",
      "name": "test:watch",
      "steps": Array [
        Object {
          "exec": "jest --watch",
        },
      ],
    },
    "unbump": Object {
      "description": "Restores version to 0.0.0",
      "env": Object {
        "BUMPFILE": "dist/version.txt",
        "CHANGELOG": "dist/changelog.md",
        "OUTFILE": "package.json",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
      },
      "name": "unbump",
      "steps": Array [
        Object {
          "builtin": "release/reset-version",
        },
      ],
    },
    "upgrade": Object {
      "description": "upgrade dependencies",
      "env": Object {
        "CI": "0",
      },
      "name": "upgrade",
      "steps": Array [
        Object {
          "exec": "pnpx npm-check-updates@16 --upgrade --target=minor --peer --dep=dev,peer,prod,optional --filter=@types/jest,@types/node,@typescript-eslint/eslint-plugin,@typescript-eslint/parser,constructs,eslint-config-prettier,eslint-import-resolver-typescript,eslint-plugin-import,eslint-plugin-prettier,eslint,jest,jest-junit,prettier,projen,standard-version,ts-jest,ts-node,typescript",
        },
        Object {
          "exec": "pnpm i --no-frozen-lockfile",
        },
        Object {
          "exec": "pnpm update @types/jest @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser constructs eslint-config-prettier eslint-import-resolver-typescript eslint-plugin-import eslint-plugin-prettier eslint jest jest-junit prettier projen standard-version ts-jest ts-node typescript",
        },
        Object {
          "exec": "npx projen",
        },
        Object {
          "spawn": "post-upgrade",
        },
      ],
    },
    "watch": Object {
      "description": "Watch & compile in the background",
      "name": "watch",
      "steps": Array [
        Object {
          "exec": "tsc --build -w",
        },
      ],
    },
  },
}
`;
