// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Files All generated files 1`] = `
Object {
  ".eslintrc.json": Object {
    "env": Object {
      "jest": true,
      "node": true,
    },
    "extends": Array [
      "plugin:import/typescript",
      "plugin:prettier/recommended",
    ],
    "ignorePatterns": Array [
      "*.js",
      "*.d.ts",
      "node_modules/",
      "*.generated.ts",
      "coverage",
      "!.projenrc.ts",
      "!projenrc/**/*.ts",
    ],
    "overrides": Array [
      Object {
        "files": Array [
          ".projenrc.ts",
        ],
        "rules": Object {
          "@typescript-eslint/no-require-imports": "off",
          "import/no-extraneous-dependencies": "off",
        },
      },
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": Object {
      "ecmaVersion": 2018,
      "project": "./tsconfig.dev.json",
      "sourceType": "module",
    },
    "plugins": Array [
      "@typescript-eslint",
      "import",
    ],
    "root": true,
    "rules": Object {
      "@typescript-eslint/member-ordering": Array [
        "error",
        Object {
          "default": Array [
            "public-static-field",
            "public-static-method",
            "protected-static-field",
            "protected-static-method",
            "private-static-field",
            "private-static-method",
            "field",
            "constructor",
            "method",
          ],
        },
      ],
      "@typescript-eslint/no-floating-promises": Array [
        "error",
      ],
      "@typescript-eslint/no-require-imports": Array [
        "error",
      ],
      "@typescript-eslint/no-shadow": Array [
        "error",
      ],
      "@typescript-eslint/return-await": Array [
        "error",
      ],
      "dot-notation": Array [
        "error",
      ],
      "import/no-extraneous-dependencies": Array [
        "error",
        Object {
          "devDependencies": Array [
            "**/test/**",
            "**/build-tools/**",
            ".projenrc.ts",
            "projenrc/**/*.ts",
          ],
          "optionalDependencies": false,
          "peerDependencies": true,
        },
      ],
      "import/no-unresolved": Array [
        "error",
      ],
      "import/order": Array [
        "warn",
        Object {
          "alphabetize": Object {
            "caseInsensitive": true,
            "order": "asc",
          },
          "groups": Array [
            "builtin",
            "external",
          ],
        },
      ],
      "key-spacing": Array [
        "error",
      ],
      "no-bitwise": Array [
        "error",
      ],
      "no-duplicate-imports": Array [
        "error",
      ],
      "no-multiple-empty-lines": Array [
        "error",
      ],
      "no-return-await": Array [
        "off",
      ],
      "no-shadow": Array [
        "off",
      ],
      "no-trailing-spaces": Array [
        "error",
      ],
    },
    "settings": Object {
      "import/parsers": Object {
        "@typescript-eslint/parser": Array [
          ".ts",
          ".tsx",
        ],
      },
      "import/resolver": Object {
        "node": Object {},
        "typescript": Object {
          "alwaysTryTypes": true,
          "project": "./tsconfig.dev.json",
        },
      },
    },
  },
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run \\"npx projen\\".

*.snap linguist-generated
/.eslintrc.json linguist-generated
/.gitattributes linguist-generated
/.github/pull_request_template.md linguist-generated
/.github/workflows/build.yml linguist-generated
/.github/workflows/pull-request-lint.yml linguist-generated
/.github/workflows/release.yml linguist-generated
/.github/workflows/upgrade-main.yml linguist-generated
/.gitignore linguist-generated
/.mergify.yml linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.prettierignore linguist-generated
/.prettierrc.json linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/.vscode/extensions.json linguist-generated
/.vscode/settings.json linguist-generated
/jest.config.json linguist-generated
/package.json linguist-generated
/pnpm-lock.yaml linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated",
  ".github/pull_request_template.md": "Fixes #",
  ".github/workflows/build.yml": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run \\"npx projen\\".

name: build
on:
  pull_request: {}
  workflow_dispatch: {}
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      self_mutation_happened: \${{ steps.self_mutation.outputs.self_mutation_happened }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: \${{ github.event.pull_request.head.ref }}
          repository: \${{ github.event.pull_request.head.repo.full_name }}
      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.4
        with:
          version: \\"8\\"
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: \\"18\\"
      - name: Install dependencies
        run: pnpm i --no-frozen-lockfile
      - name: build
        run: npx projen build
      - name: Find mutations
        id: self_mutation
        run: |-
          git add .
          git diff --staged --patch --exit-code > .repo.patch || echo \\"self_mutation_happened=true\\" >> $GITHUB_OUTPUT
      - name: Upload patch
        if: steps.self_mutation.outputs.self_mutation_happened
        uses: actions/upload-artifact@v3
        with:
          name: .repo.patch
          path: .repo.patch
      - name: Fail build on mutation
        if: steps.self_mutation.outputs.self_mutation_happened
        run: |-
          echo \\"::error::Files were changed during build (see build log). If this was triggered from a fork, you will need to update your branch.\\"
          cat .repo.patch
          exit 1
  self-mutation:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: always() && needs.build.outputs.self_mutation_happened && !(github.event.pull_request.head.repo.full_name != github.repository)
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: \${{ secrets.PROJEN_GITHUB_TOKEN }}
          ref: \${{ github.event.pull_request.head.ref }}
          repository: \${{ github.event.pull_request.head.repo.full_name }}
      - name: Download patch
        uses: actions/download-artifact@v3
        with:
          name: .repo.patch
          path: \${{ runner.temp }}
      - name: Apply patch
        run: '[ -s \${{ runner.temp }}/.repo.patch ] && git apply \${{ runner.temp }}/.repo.patch || echo \\"Empty patch. Skipping.\\"'
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Push changes
        env:
          PULL_REQUEST_REF: \${{ github.event.pull_request.head.ref }}
        run: |-
          git add .
          git commit -s -m \\"chore: self mutation\\"
          git push origin HEAD:$PULL_REQUEST_REF
",
  ".github/workflows/pull-request-lint.yml": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run \\"npx projen\\".

name: pull-request-lint
on:
  pull_request_target:
    types:
      - labeled
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - edited
jobs:
  validate:
    name: Validate PR title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: amannn/action-semantic-pull-request@v5.0.2
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          types: |-
            feat
            fix
            chore
          requireScope: false
          githubBaseUrl: \${{ github.api_url }}
",
  ".github/workflows/release.yml": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: \${{ steps.git_remote.outputs.latest_commit }}
      tag_exists: \${{ steps.check_tag_exists.outputs.exists }}
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.4
        with:
          version: \\"8\\"
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: \\"18\\"
      - name: Install dependencies
        run: pnpm i --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Check if version has already been tagged
        id: check_tag_exists
        run: |-
          TAG=$(cat dist/releasetag.txt)
          ([ ! -z \\"$TAG\\" ] && git ls-remote -q --exit-code --tags origin $TAG && (echo \\"exists=true\\" >> $GITHUB_OUTPUT)) || (echo \\"exists=false\\" >> $GITHUB_OUTPUT)
          cat $GITHUB_OUTPUT
      - name: Check for new commits
        id: git_remote
        run: |-
          echo \\"latest_commit=$(git ls-remote origin -h \${{ github.ref }} | cut -f1)\\" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
      - name: Backup artifact permissions
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: cd dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.tag_exists != 'true' && needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: \\"18\\"
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: \${{ github.repository }}
          GITHUB_REF: \${{ github.ref }}
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi
",
  ".github/workflows/upgrade-main.yml": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run \\"npx projen\\".

name: upgrade-main
on:
  workflow_dispatch: {}
  schedule:
    - cron: 0 0 * * *
jobs:
  upgrade:
    name: Upgrade
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      patch_created: \${{ steps.create_patch.outputs.patch_created }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.4
        with:
          version: \\"8\\"
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: \\"18\\"
      - name: Install dependencies
        run: pnpm i --frozen-lockfile
      - name: Upgrade dependencies
        run: npx projen upgrade
      - name: Find mutations
        id: create_patch
        run: |-
          git add .
          git diff --staged --patch --exit-code > .repo.patch || echo \\"patch_created=true\\" >> $GITHUB_OUTPUT
      - name: Upload patch
        if: steps.create_patch.outputs.patch_created
        uses: actions/upload-artifact@v3
        with:
          name: .repo.patch
          path: .repo.patch
  pr:
    name: Create Pull Request
    needs: upgrade
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: \${{ needs.upgrade.outputs.patch_created }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Download patch
        uses: actions/download-artifact@v3
        with:
          name: .repo.patch
          path: \${{ runner.temp }}
      - name: Apply patch
        run: '[ -s \${{ runner.temp }}/.repo.patch ] && git apply \${{ runner.temp }}/.repo.patch || echo \\"Empty patch. Skipping.\\"'
      - name: Set git identity
        run: |-
          git config user.name \\"github-actions\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v4
        with:
          token: \${{ secrets.PROJEN_GITHUB_TOKEN }}
          commit-message: |-
            chore(deps): upgrade dependencies

            Upgrades project dependencies. See details in [workflow run].

            [Workflow Run]: \${{ github.server_url }}/\${{ github.repository }}/actions/runs/\${{ github.run_id }}

            ------

            *Automatically created by projen via the \\"upgrade-main\\" workflow*
          branch: github-actions/upgrade-main
          title: \\"chore(deps): upgrade dependencies\\"
          body: |-
            Upgrades project dependencies. See details in [workflow run].

            [Workflow Run]: \${{ github.server_url }}/\${{ github.repository }}/actions/runs/\${{ github.run_id }}

            ------

            *Automatically created by projen via the \\"upgrade-main\\" workflow*
          author: github-actions <github-actions@github.com>
          committer: github-actions <github-actions@github.com>
          signoff: true
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run \\"npx projen\\".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.github/workflows/pull-request-lint.yml
!/package.json
!/.npmignore
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.github/workflows/build.yml
/dist/changelog.md
/dist/version.txt
!/.github/workflows/release.yml
!/.mergify.yml
!/.github/workflows/upgrade-main.yml
!/.github/pull_request_template.md
!/.prettierignore
!/.prettierrc.json
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.eslintrc.json
/test-reports/
junit.xml
!/jest.config.json
/coverage/
.DS_Store
!/.projenrc.ts
!/.vscode/settings.json
!/.vscode/extensions.json
",
  ".mergify.yml": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run \\"npx projen\\".

queue_rules:
  - name: default
    update_method: merge
    conditions:
      - \\"#approved-reviews-by>=1\\"
      - -label~=(do-not-merge)
      - status-success=build
pull_request_rules:
  - name: Automatic merge on approval and successful build
    actions:
      delete_head_branch: {}
      queue:
        method: squash
        name: default
        commit_message_template: |-
          {{ title }} (#{{ number }})

          {{ body }}
    conditions:
      - \\"#approved-reviews-by>=1\\"
      - -label~=(do-not-merge)
      - status-success=build
",
  ".npmignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run \\"npx projen\\".
/.projen/
permissions-backup.acl
/dist/changelog.md
/dist/version.txt
/.mergify.yml
/.prettierignore
/.prettierrc.json
/test/
/tsconfig.dev.json
/src/
!/lib/
!/lib/**/*.js
!/lib/**/*.d.ts
dist
/tsconfig.json
/.github/
/.vscode/
/.idea/
/.projenrc.js
tsconfig.tsbuildinfo
/.eslintrc.json
*.spec.d.ts
*.spec.js
/test-reports/
junit.xml
/jest.config.json
/coverage/
/.gitattributes
/.projenrc.ts
",
  ".npmrc": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run \\"npx projen\\".

resolution-mode=highest
",
  ".prettierignore": "# ~~ Generated by projen. To modify, edit .projenrc.ts and run \\"npx projen\\".
",
  ".prettierrc.json": Object {
    "overrides": Array [],
  },
  ".projen/deps.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \\"npx projen\\".",
    "dependencies": Array [
      Object {
        "name": "@types/jest",
        "type": "build",
      },
      Object {
        "name": "@types/node",
        "type": "build",
        "version": "^18",
      },
      Object {
        "name": "@typescript-eslint/eslint-plugin",
        "type": "build",
        "version": "^6",
      },
      Object {
        "name": "@typescript-eslint/parser",
        "type": "build",
        "version": "^6",
      },
      Object {
        "name": "constructs",
        "type": "build",
        "version": "^10.0.0",
      },
      Object {
        "name": "eslint-config-prettier",
        "type": "build",
      },
      Object {
        "name": "eslint-import-resolver-typescript",
        "type": "build",
      },
      Object {
        "name": "eslint-plugin-import",
        "type": "build",
      },
      Object {
        "name": "eslint-plugin-prettier",
        "type": "build",
      },
      Object {
        "name": "eslint",
        "type": "build",
        "version": "^8",
      },
      Object {
        "name": "jest",
        "type": "build",
      },
      Object {
        "name": "jest-junit",
        "type": "build",
        "version": "^15",
      },
      Object {
        "name": "prettier",
        "type": "build",
      },
      Object {
        "name": "projen",
        "type": "build",
      },
      Object {
        "name": "standard-version",
        "type": "build",
        "version": "^9",
      },
      Object {
        "name": "ts-jest",
        "type": "build",
      },
      Object {
        "name": "ts-node",
        "type": "build",
      },
      Object {
        "name": "typescript",
        "type": "build",
      },
    ],
  },
  ".projen/files.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \\"npx projen\\".",
    "files": Array [
      ".eslintrc.json",
      ".gitattributes",
      ".github/pull_request_template.md",
      ".github/workflows/build.yml",
      ".github/workflows/pull-request-lint.yml",
      ".github/workflows/release.yml",
      ".github/workflows/upgrade-main.yml",
      ".gitignore",
      ".mergify.yml",
      ".npmignore",
      ".npmrc",
      ".prettierignore",
      ".prettierrc.json",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      ".vscode/extensions.json",
      ".vscode/settings.json",
      "jest.config.json",
      "tsconfig.dev.json",
      "tsconfig.json",
    ],
  },
  ".projen/tasks.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \\"npx projen\\".",
    "env": Object {
      "PATH": "$(pnpm -c exec \\"node --print process.env.PATH\\")",
    },
    "tasks": Object {
      "build": Object {
        "description": "Full release build",
        "name": "build",
        "steps": Array [
          Object {
            "spawn": "default",
          },
          Object {
            "spawn": "pre-compile",
          },
          Object {
            "spawn": "compile",
          },
          Object {
            "spawn": "post-compile",
          },
          Object {
            "spawn": "test",
          },
          Object {
            "spawn": "package",
          },
        ],
      },
      "bump": Object {
        "condition": "! git log --oneline -1 | grep -q \\"chore(release):\\"",
        "description": "Bumps version based on latest git tag and generates a changelog entry",
        "env": Object {
          "BUMPFILE": "dist/version.txt",
          "CHANGELOG": "dist/changelog.md",
          "OUTFILE": "package.json",
          "RELEASETAG": "dist/releasetag.txt",
          "RELEASE_TAG_PREFIX": "",
        },
        "name": "bump",
        "steps": Array [
          Object {
            "builtin": "release/bump-version",
          },
        ],
      },
      "clobber": Object {
        "condition": "git diff --exit-code > /dev/null",
        "description": "hard resets to HEAD of origin and cleans the local repo",
        "env": Object {
          "BRANCH": "$(git branch --show-current)",
        },
        "name": "clobber",
        "steps": Array [
          Object {
            "exec": "git checkout -b scratch",
            "name": "save current HEAD in \\"scratch\\" branch",
          },
          Object {
            "exec": "git checkout $BRANCH",
          },
          Object {
            "exec": "git fetch origin",
            "name": "fetch latest changes from origin",
          },
          Object {
            "exec": "git reset --hard origin/$BRANCH",
            "name": "hard reset to origin commit",
          },
          Object {
            "exec": "git clean -fdx",
            "name": "clean all untracked files",
          },
          Object {
            "say": "ready to rock! (unpushed commits are under the \\"scratch\\" branch)",
          },
        ],
      },
      "compile": Object {
        "description": "Only compile",
        "name": "compile",
        "steps": Array [
          Object {
            "exec": "tsc --build",
          },
        ],
      },
      "default": Object {
        "description": "Synthesize project files",
        "name": "default",
        "steps": Array [
          Object {
            "exec": "ts-node --project tsconfig.dev.json .projenrc.ts",
          },
        ],
      },
      "eject": Object {
        "description": "Remove projen from the project",
        "env": Object {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": Array [
          Object {
            "spawn": "default",
          },
        ],
      },
      "eslint": Object {
        "description": "Runs eslint against the codebase",
        "name": "eslint",
        "steps": Array [
          Object {
            "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern $@ src test build-tools projenrc .projenrc.ts",
            "receiveArgs": true,
          },
        ],
      },
      "install": Object {
        "description": "Install project dependencies and update lockfile (non-frozen)",
        "name": "install",
        "steps": Array [
          Object {
            "exec": "pnpm i --no-frozen-lockfile",
          },
        ],
      },
      "install:ci": Object {
        "description": "Install project dependencies using frozen lockfile",
        "name": "install:ci",
        "steps": Array [
          Object {
            "exec": "pnpm i --frozen-lockfile",
          },
        ],
      },
      "package": Object {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": Object {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "post-upgrade": Object {
        "description": "Runs after upgrading dependencies",
        "name": "post-upgrade",
      },
      "pre-compile": Object {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "release": Object {
        "description": "Prepare a release from \\"main\\" branch",
        "env": Object {
          "RELEASE": "true",
        },
        "name": "release",
        "steps": Array [
          Object {
            "exec": "rm -fr dist",
          },
          Object {
            "spawn": "bump",
          },
          Object {
            "spawn": "build",
          },
          Object {
            "spawn": "unbump",
          },
          Object {
            "exec": "git diff --ignore-space-at-eol --exit-code",
          },
        ],
      },
      "test": Object {
        "description": "Run tests",
        "name": "test",
        "steps": Array [
          Object {
            "spawn": "eslint",
          },
          Object {
            "exec": "jest --passWithNoTests --updateSnapshot",
            "receiveArgs": true,
          },
        ],
      },
      "test:watch": Object {
        "description": "Run jest in watch mode",
        "name": "test:watch",
        "steps": Array [
          Object {
            "exec": "jest --watch",
          },
        ],
      },
      "unbump": Object {
        "description": "Restores version to 0.0.0",
        "env": Object {
          "BUMPFILE": "dist/version.txt",
          "CHANGELOG": "dist/changelog.md",
          "OUTFILE": "package.json",
          "RELEASETAG": "dist/releasetag.txt",
          "RELEASE_TAG_PREFIX": "",
        },
        "name": "unbump",
        "steps": Array [
          Object {
            "builtin": "release/reset-version",
          },
        ],
      },
      "upgrade": Object {
        "description": "upgrade dependencies",
        "env": Object {
          "CI": "0",
        },
        "name": "upgrade",
        "steps": Array [
          Object {
            "exec": "pnpx npm-check-updates@16 --upgrade --target=minor --peer --dep=dev,peer,prod,optional --filter=@types/jest,@types/node,@typescript-eslint/eslint-plugin,@typescript-eslint/parser,constructs,eslint-config-prettier,eslint-import-resolver-typescript,eslint-plugin-import,eslint-plugin-prettier,eslint,jest,jest-junit,prettier,projen,standard-version,ts-jest,ts-node,typescript",
          },
          Object {
            "exec": "pnpm i --no-frozen-lockfile",
          },
          Object {
            "exec": "pnpm update @types/jest @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser constructs eslint-config-prettier eslint-import-resolver-typescript eslint-plugin-import eslint-plugin-prettier eslint jest jest-junit prettier projen standard-version ts-jest ts-node typescript",
          },
          Object {
            "exec": "npx projen",
          },
          Object {
            "spawn": "post-upgrade",
          },
        ],
      },
      "watch": Object {
        "description": "Watch & compile in the background",
        "name": "watch",
        "steps": Array [
          Object {
            "exec": "tsc --build -w",
          },
        ],
      },
    },
  },
  ".vscode/extensions.json": Object {
    "recommendations": Array [
      "dbaeumer.vscode-eslint",
    ],
  },
  ".vscode/settings.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \\"npx projen\\".",
    "[typescript]": Object {
      "editor.codeActionsOnSave": Object {
        "source.fixAll.eslint": "explicit",
      },
    },
    "editor.bracketPairColorization.enabled": true,
    "editor.guides.bracketPairs": "active",
    "editor.rulers": Array [
      80,
      120,
    ],
    "editor.tabSize": 2,
    "eslint.workingDirectories": Array [
      Object {
        "mode": "auto",
      },
    ],
  },
  "README.md": "# replace this",
  "jest.config.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \\"npx projen\\".",
    "clearMocks": true,
    "collectCoverage": true,
    "coverageDirectory": "coverage",
    "coveragePathIgnorePatterns": Array [
      "/node_modules/",
    ],
    "coverageReporters": Array [
      "json",
      "lcov",
      "clover",
      "cobertura",
      "text",
    ],
    "moduleFileExtensions": Array [
      "js",
      "ts",
    ],
    "preset": "ts-jest",
    "reporters": Array [
      "default",
      Array [
        "jest-junit",
        Object {
          "outputDirectory": "test-reports",
        },
      ],
    ],
    "roots": Array [
      "<rootDir>/src",
    ],
    "testMatch": Array [
      "**/*.spec.ts",
    ],
    "testPathIgnorePatterns": Array [
      "/node_modules/",
    ],
    "transform": Object {
      "^.+\\\\.ts?$": "ts-jest",
    },
    "watchPathIgnorePatterns": Array [
      "/node_modules/",
    ],
  },
  "package.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \\"npx projen\\".",
    "devDependencies": Object {
      "@types/jest": "*",
      "@types/node": "^18",
      "@typescript-eslint/eslint-plugin": "^6",
      "@typescript-eslint/parser": "^6",
      "constructs": "^10.0.0",
      "eslint": "^8",
      "eslint-config-prettier": "*",
      "eslint-import-resolver-typescript": "*",
      "eslint-plugin-import": "*",
      "eslint-plugin-prettier": "*",
      "jest": "*",
      "jest-junit": "^15",
      "prettier": "*",
      "projen": "*",
      "standard-version": "^9",
      "ts-jest": "*",
      "ts-node": "*",
      "typescript": "*",
    },
    "license": "UNLICENSED",
    "main": "lib/index.js",
    "name": "my-project",
    "pnpm": Object {},
    "scripts": Object {
      "build": "npx projen build",
      "bump": "npx projen bump",
      "clobber": "npx projen clobber",
      "compile": "npx projen compile",
      "default": "npx projen default",
      "eject": "npx projen eject",
      "eslint": "npx projen eslint",
      "package": "npx projen package",
      "post-compile": "npx projen post-compile",
      "post-upgrade": "npx projen post-upgrade",
      "pre-compile": "npx projen pre-compile",
      "projen": "npx projen",
      "release": "npx projen release",
      "test": "npx projen test",
      "test:watch": "npx projen test:watch",
      "unbump": "npx projen unbump",
      "upgrade": "npx projen upgrade",
      "watch": "npx projen watch",
    },
    "types": "lib/index.d.ts",
    "version": "0.0.0",
  },
  "src/index.ts": "export class Hello {
  public sayHello() {
    return 'hello, world!';
  }
}",
  "tsconfig.dev.json": Object {
    "compilerOptions": Object {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": Array [
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "resolveJsonModule": true,
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": Array [
      "node_modules",
    ],
    "include": Array [
      "src/**/*.ts",
      "test/**/*.ts",
      ".projenrc.ts",
      "projenrc/**/*.ts",
    ],
  },
  "tsconfig.json": Object {
    "compilerOptions": Object {
      "alwaysStrict": true,
      "declaration": true,
      "esModuleInterop": true,
      "experimentalDecorators": true,
      "inlineSourceMap": true,
      "inlineSources": true,
      "lib": Array [
        "es2019",
      ],
      "module": "CommonJS",
      "noEmitOnError": false,
      "noFallthroughCasesInSwitch": true,
      "noImplicitAny": true,
      "noImplicitReturns": true,
      "noImplicitThis": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "outDir": "lib",
      "resolveJsonModule": true,
      "rootDir": "src",
      "strict": true,
      "strictNullChecks": true,
      "strictPropertyInitialization": true,
      "stripInternal": true,
      "target": "ES2019",
    },
    "exclude": Array [],
    "include": Array [
      "src/**/*.ts",
    ],
  },
}
`;
