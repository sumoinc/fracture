import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { DynamoDBDocumentClient, UpdateCommand } from "@aws-sdk/lib-dynamodb";
import {
  UpdateActorInput,
  UpdateActorOutput,
  Response,
} from "../../types";

/**
 * Generate a DynamoDB client, configure it to use a local endpoint when needed
 * to support unit testing with dynalite.
 *
 * https://www.npmjs.com/package/jest-dynalite
 */
const config = {
  ...(process.env.MOCK_DYNAMODB_ENDPOINT && {
    endpoint: process.env.MOCK_DYNAMODB_ENDPOINT,
    sslEnabled: false,
    region: 'local',
  }),
}
const client = new DynamoDBClient(config);
const dynamo = DynamoDBDocumentClient.from(client);

export const updateActor = async (
  input: Required<UpdateActorInput>
): Promise<Response<UpdateActorOutput>> => {

  const {
    id,
    firstName,
    lastName,
  } = input;

  const fn = firstName;
  const ln = lastName;

  const t = "actor";
  const v = "LATEST";
  const ud = new Date().toISOString();
  const pk = id.toLowerCase();
  const sk = t.toLowerCase() + "#" + v.toLowerCase();
  const idx = fn.toLowerCase() + "#" + ln.toLowerCase();

  const result = await dynamo.send(
    new UpdateCommand({
      TableName: "tenant",
      UpdateExpression: "set #ud = :ud, #fn = :fn, #ln = :ln, #idx = :idx",
      ExpressionAttributeValues: {
        ":ud": ud,
        ":fn": fn,
        ":ln": ln,
        ":idx": idx,
      },
      ExpressionAttributeNames: {
        "#ud": "ud",
        "#fn": "fn",
        "#ln": "ln",
        "#idx": "idx",
      },
      Key: {
        pk,
        sk,
      },
      ReturnConsumedCapacity: "INDEXES",
      ReturnItemCollectionMetrics: "SIZE",
    })
  );

  console.log(result);
  return {
    // @ts-ignore
    data: {
    },
    errors: [],
    status: 200,
  };
};

// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
