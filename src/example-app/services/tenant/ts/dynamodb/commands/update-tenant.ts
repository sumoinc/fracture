import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { DynamoDBDocumentClient, UpdateCommand } from "@aws-sdk/lib-dynamodb";
import {
  Error,
  UpdateTenantInput,
  UpdateTenantOutput,
  Response,
} from "../../../../../types/tenant-service";

/**
 * Generate a DynamoDB client, configure it to use a local endpoint when needed
 * to support unit testing with dynalite.
 *
 * https://www.npmjs.com/package/jest-dynalite
 */
const config = {
  ...(process.env.MOCK_DYNAMODB_ENDPOINT && {
    endpoint: process.env.MOCK_DYNAMODB_ENDPOINT,
    sslEnabled: false,
    region: 'local',
  }),
}
const client = new DynamoDBClient(config);
const dynamo = DynamoDBDocumentClient.from(client);

export const updateTenant = async (
  input: UpdateTenantInput
): Promise<Response<UpdateTenantOutput>> => {

  /**
   * An error container in case we encounter problems along the way.
   */
  const errors = [] as Error[];

  /**
   * Assume things will go well (until they don't).
   */
  let status = 200;

  /**
   * Unwrap external inputs.
   */
  const {
    id,
    name,
    nickname,
  } = input;

  const n = name;
  const nn = nickname;

  /**
   * Generate needed values.
   */
  const t = "tenant";
  const v = "latest";
  const ud = new Date().toISOString();
  const pk = id.toLowerCase();
  const sk = t.toLowerCase() + "#" + v.toLowerCase();
  const idx = n.toLowerCase();

  const result = await dynamo.send(
    new UpdateCommand({
      TableName: "tenant",
      UpdateExpression: "set #ud = :ud, #n = :n, #nn = :nn, #idx = :idx",
      ExpressionAttributeValues: {
        ":ud": ud,
        ":n": n,
        ":nn": nn,
        ":idx": idx,
      },
      ExpressionAttributeNames: {
        "#ud": "ud",
        "#n": "n",
        "#nn": "nn",
        "#idx": "idx",
      },
      Key: {
        pk,
        sk,
      },
      ReturnValues: "ALL_NEW",
      ReturnConsumedCapacity: "INDEXES",
      ReturnItemCollectionMetrics: "SIZE",
    })
  );

  /**
   * Expand/comnvert data to output format.
   */
  const data = (result.Attributes)
    ? {
      id: result.Attributes.id,
      type: result.Attributes.t,
      version: result.Attributes.v,
      createdAt: result.Attributes.cd,
      updatedAt: result.Attributes.ud,
      name: result.Attributes.n,
      nickname: result.Attributes.nn,
    } : undefined;

  /**
   * Log error if no records found.
   */
  if (!result.Attributes) {
    status = 404;
    errors.push({
      code: 12345,
      source: "TODO",
      message: "TODO - Attributes not found based on inputs.",
      detail: "TODO",
    })
  }

  /**
   * Return result.
   */
  return {
    data,
    errors,
    status,
  };
};

// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
