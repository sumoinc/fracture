import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { DynamoDBDocumentClient, UpdateCommand } from "@aws-sdk/lib-dynamodb";
import {
  UpdateUserInput,
  UpdateUserOutput,
  Response,
} from "../../types";

/**
 * Generate a DynamoDB client, configure it to use a local endpoint when needed
 * to support unit testing with dynalite.
 *
 * https://www.npmjs.com/package/jest-dynalite
 */
const config = {
  ...(process.env.MOCK_DYNAMODB_ENDPOINT && {
    endpoint: process.env.MOCK_DYNAMODB_ENDPOINT,
    sslEnabled: false,
    region: 'local',
  }),
}
console.log(config, process.env.MOCK_DYNAMODB_ENDPOINT)
const client = new DynamoDBClient(config);
const dynamo = DynamoDBDocumentClient.from(client);

export const updateUser = async (
  input: Required<UpdateUserInput>
): Promise<Response<UpdateUserOutput>> => {

  const {
    id,
    firstName,
    lastName,
  } = input;

  const fn = firstName;
  const ln = lastName;

  const t = "user";
  const v = "LATEST";
  const ud = new Date().toISOString();
  const pk = id.toLowerCase();
  const sk = t.toLowerCase() + "#" + v.toLowerCase();

  const result = await dynamo.send(
    new UpdateCommand({
      TableName: "user",
      Key: {
        pk,
        sk,
      },
    })
  );

  console.log(result);
  return {
    data: {
      id: id,
      type: t,
      version: v,
      createdAt: cd,
      updatedAt: ud,
      firstName: fn,
      lastName: ln,
    },
    errors: [],
    status: 200,
  };
};

// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
