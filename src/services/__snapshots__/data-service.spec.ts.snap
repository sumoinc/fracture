// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`validate generated project files Detect new files 1`] = `
Array [
  "services/foo/.eslintrc.json",
  "services/foo/.gitattributes",
  "services/foo/.gitignore",
  "services/foo/.npmignore",
  "services/foo/.projen/deps.json",
  "services/foo/.projen/files.json",
  "services/foo/.projen/tasks.json",
  "services/foo/cdk.json",
  "services/foo/LICENSE",
  "services/foo/package.json",
  "services/foo/README.md",
  "services/foo/src/main.ts",
  "services/foo/test/main.test.ts",
  "services/foo/tsconfig.dev.json",
  "services/foo/tsconfig.json",
]
`;

exports[`validate generated project files services/foo/.eslintrc.json 1`] = `
Object {
  "env": Object {
    "jest": true,
    "node": true,
  },
  "extends": Array [
    "plugin:import/typescript",
  ],
  "ignorePatterns": Array [
    "*.js",
    "*.d.ts",
    "node_modules/",
    "*.generated.ts",
    "coverage",
  ],
  "overrides": Array [],
  "parser": "@typescript-eslint/parser",
  "parserOptions": Object {
    "ecmaVersion": 2018,
    "project": "./tsconfig.dev.json",
    "sourceType": "module",
  },
  "plugins": Array [
    "@typescript-eslint",
    "import",
  ],
  "root": true,
  "rules": Object {
    "@typescript-eslint/indent": Array [
      "error",
      2,
    ],
    "@typescript-eslint/member-delimiter-style": Array [
      "error",
    ],
    "@typescript-eslint/member-ordering": Array [
      "error",
      Object {
        "default": Array [
          "public-static-field",
          "public-static-method",
          "protected-static-field",
          "protected-static-method",
          "private-static-field",
          "private-static-method",
          "field",
          "constructor",
          "method",
        ],
      },
    ],
    "@typescript-eslint/no-floating-promises": Array [
      "error",
    ],
    "@typescript-eslint/no-require-imports": Array [
      "error",
    ],
    "@typescript-eslint/no-shadow": Array [
      "error",
    ],
    "@typescript-eslint/return-await": Array [
      "error",
    ],
    "array-bracket-newline": Array [
      "error",
      "consistent",
    ],
    "array-bracket-spacing": Array [
      "error",
      "never",
    ],
    "brace-style": Array [
      "error",
      "1tbs",
      Object {
        "allowSingleLine": true,
      },
    ],
    "comma-dangle": Array [
      "error",
      "always-multiline",
    ],
    "comma-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": false,
      },
    ],
    "curly": Array [
      "error",
      "multi-line",
      "consistent",
    ],
    "dot-notation": Array [
      "error",
    ],
    "import/no-extraneous-dependencies": Array [
      "error",
      Object {
        "devDependencies": Array [
          "**/test/**",
          "**/build-tools/**",
        ],
        "optionalDependencies": false,
        "peerDependencies": true,
      },
    ],
    "import/no-unresolved": Array [
      "error",
    ],
    "import/order": Array [
      "warn",
      Object {
        "alphabetize": Object {
          "caseInsensitive": true,
          "order": "asc",
        },
        "groups": Array [
          "builtin",
          "external",
        ],
      },
    ],
    "indent": Array [
      "off",
    ],
    "key-spacing": Array [
      "error",
    ],
    "keyword-spacing": Array [
      "error",
    ],
    "max-len": Array [
      "error",
      Object {
        "code": 150,
        "ignoreComments": true,
        "ignoreRegExpLiterals": true,
        "ignoreStrings": true,
        "ignoreTemplateLiterals": true,
        "ignoreUrls": true,
      },
    ],
    "no-bitwise": Array [
      "error",
    ],
    "no-duplicate-imports": Array [
      "error",
    ],
    "no-multi-spaces": Array [
      "error",
      Object {
        "ignoreEOLComments": false,
      },
    ],
    "no-multiple-empty-lines": Array [
      "error",
    ],
    "no-return-await": Array [
      "off",
    ],
    "no-shadow": Array [
      "off",
    ],
    "no-trailing-spaces": Array [
      "error",
    ],
    "object-curly-newline": Array [
      "error",
      Object {
        "consistent": true,
        "multiline": true,
      },
    ],
    "object-curly-spacing": Array [
      "error",
      "always",
    ],
    "object-property-newline": Array [
      "error",
      Object {
        "allowAllPropertiesOnSameLine": true,
      },
    ],
    "quote-props": Array [
      "error",
      "consistent-as-needed",
    ],
    "quotes": Array [
      "error",
      "single",
      Object {
        "avoidEscape": true,
      },
    ],
    "semi": Array [
      "error",
      "always",
    ],
    "space-before-blocks": Array [
      "error",
    ],
  },
  "settings": Object {
    "import/parsers": Object {
      "@typescript-eslint/parser": Array [
        ".ts",
        ".tsx",
      ],
    },
    "import/resolver": Object {
      "node": Object {},
      "typescript": Object {
        "alwaysTryTypes": true,
        "project": "./tsconfig.dev.json",
      },
    },
  },
}
`;

exports[`validate generated project files services/foo/.gitattributes 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

/.eslintrc.json linguist-generated
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/cdk.json linguist-generated
/LICENSE linguist-generated
/package.json linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated
/yarn.lock linguist-generated"
`;

exports[`validate generated project files services/foo/.gitignore 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/LICENSE
!/.npmignore
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
/test-reports/
junit.xml
/coverage/
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.eslintrc.json
/assets/
!/cdk.json
/cdk.out/
.cdk.staging/
.parcel-cache/
"
`;

exports[`validate generated project files services/foo/.npmignore 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
/.projen/
/test-reports/
junit.xml
/coverage/
/test/
/tsconfig.dev.json
/src/
!/lib/
!/lib/**/*.js
!/lib/**/*.d.ts
dist
/tsconfig.json
/.github/
/.vscode/
/.idea/
/.projenrc.js
tsconfig.tsbuildinfo
/.eslintrc.json
!/assets/
cdk.out/
.cdk.staging/
"
`;

exports[`validate generated project files services/foo/.npmrc 1`] = `undefined`;

exports[`validate generated project files services/foo/.projen/deps.json 1`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "dependencies": Array [
    Object {
      "name": "@types/jest",
      "type": "build",
    },
    Object {
      "name": "@types/node",
      "type": "build",
      "version": "^16",
    },
    Object {
      "name": "@typescript-eslint/eslint-plugin",
      "type": "build",
      "version": "^6",
    },
    Object {
      "name": "@typescript-eslint/parser",
      "type": "build",
      "version": "^6",
    },
    Object {
      "name": "aws-cdk",
      "type": "build",
      "version": "^2.94.0",
    },
    Object {
      "name": "esbuild",
      "type": "build",
    },
    Object {
      "name": "eslint-import-resolver-node",
      "type": "build",
    },
    Object {
      "name": "eslint-import-resolver-typescript",
      "type": "build",
    },
    Object {
      "name": "eslint-plugin-import",
      "type": "build",
    },
    Object {
      "name": "eslint",
      "type": "build",
      "version": "^8",
    },
    Object {
      "name": "jest",
      "type": "build",
    },
    Object {
      "name": "jest-junit",
      "type": "build",
      "version": "^15",
    },
    Object {
      "name": "npm-check-updates",
      "type": "build",
      "version": "^16",
    },
    Object {
      "name": "projen",
      "type": "build",
    },
    Object {
      "name": "ts-jest",
      "type": "build",
    },
    Object {
      "name": "ts-node",
      "type": "build",
    },
    Object {
      "name": "typescript",
      "type": "build",
    },
    Object {
      "name": "aws-cdk-lib",
      "type": "runtime",
      "version": "^2.94.0",
    },
    Object {
      "name": "constructs",
      "type": "runtime",
      "version": "^10.0.5",
    },
  ],
}
`;

exports[`validate generated project files services/foo/.projen/files.json 1`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "files": Array [
    ".eslintrc.json",
    ".gitattributes",
    ".gitignore",
    ".npmignore",
    ".npmrc",
    ".projen/deps.json",
    ".projen/files.json",
    ".projen/tasks.json",
    "cdk.json",
    "LICENSE",
    "tsconfig.dev.json",
    "tsconfig.json",
  ],
}
`;

exports[`validate generated project files services/foo/.projen/tasks.json 1`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "env": Object {
    "PATH": "$(npx -c \\"node --print process.env.PATH\\")",
  },
  "tasks": Object {
    "build": Object {
      "description": "Full release build",
      "name": "build",
      "steps": Array [
        Object {
          "spawn": "pre-compile",
        },
        Object {
          "spawn": "compile",
        },
        Object {
          "spawn": "post-compile",
        },
        Object {
          "spawn": "test",
        },
        Object {
          "spawn": "package",
        },
      ],
    },
    "bundle": Object {
      "description": "Prepare assets",
      "name": "bundle",
    },
    "compile": Object {
      "description": "Only compile",
      "name": "compile",
    },
    "default": Object {
      "description": "Synthesize project files",
      "name": "default",
    },
    "deploy": Object {
      "description": "Deploys your CDK app to the AWS cloud",
      "name": "deploy",
      "steps": Array [
        Object {
          "exec": "cdk deploy",
          "receiveArgs": true,
        },
      ],
    },
    "destroy": Object {
      "description": "Destroys your cdk app in the AWS cloud",
      "name": "destroy",
      "steps": Array [
        Object {
          "exec": "cdk destroy",
          "receiveArgs": true,
        },
      ],
    },
    "diff": Object {
      "description": "Diffs the currently deployed app against your code",
      "name": "diff",
      "steps": Array [
        Object {
          "exec": "cdk diff",
        },
      ],
    },
    "eslint": Object {
      "description": "Runs eslint against the codebase",
      "name": "eslint",
      "steps": Array [
        Object {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools",
        },
      ],
    },
    "install": Object {
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "name": "install",
      "steps": Array [
        Object {
          "exec": "yarn install --check-files",
        },
      ],
    },
    "install:ci": Object {
      "description": "Install project dependencies using frozen lockfile",
      "name": "install:ci",
      "steps": Array [
        Object {
          "exec": "yarn install --check-files --frozen-lockfile",
        },
      ],
    },
    "package": Object {
      "description": "Creates the distribution package",
      "name": "package",
    },
    "post-compile": Object {
      "description": "Runs after successful compilation",
      "name": "post-compile",
      "steps": Array [
        Object {
          "spawn": "synth:silent",
        },
      ],
    },
    "post-upgrade": Object {
      "description": "Runs after upgrading dependencies",
      "name": "post-upgrade",
    },
    "pre-compile": Object {
      "description": "Prepare the project for compilation",
      "name": "pre-compile",
    },
    "synth": Object {
      "description": "Synthesizes your cdk app into cdk.out",
      "name": "synth",
      "steps": Array [
        Object {
          "exec": "cdk synth",
        },
      ],
    },
    "synth:silent": Object {
      "description": "Synthesizes your cdk app into cdk.out and suppresses the template in stdout (part of \\"yarn build\\")",
      "name": "synth:silent",
      "steps": Array [
        Object {
          "exec": "cdk synth -q",
        },
      ],
    },
    "test": Object {
      "description": "Run tests",
      "name": "test",
      "steps": Array [
        Object {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true,
        },
        Object {
          "spawn": "eslint",
        },
      ],
    },
    "test:watch": Object {
      "description": "Run jest in watch mode",
      "name": "test:watch",
      "steps": Array [
        Object {
          "exec": "jest --watch",
        },
      ],
    },
    "upgrade": Object {
      "description": "upgrade dependencies",
      "env": Object {
        "CI": "0",
      },
      "name": "upgrade",
      "steps": Array [
        Object {
          "exec": "yarn upgrade npm-check-updates",
        },
        Object {
          "exec": "npm-check-updates --upgrade --target=minor --peer --dep=dev,peer,prod,optional --filter=@types/jest,@types/node,@typescript-eslint/eslint-plugin,@typescript-eslint/parser,aws-cdk,esbuild,eslint-import-resolver-node,eslint-import-resolver-typescript,eslint-plugin-import,eslint,jest,jest-junit,npm-check-updates,projen,ts-jest,ts-node,typescript,aws-cdk-lib,constructs",
        },
        Object {
          "exec": "yarn install --check-files",
        },
        Object {
          "exec": "yarn upgrade @types/jest @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser aws-cdk esbuild eslint-import-resolver-node eslint-import-resolver-typescript eslint-plugin-import eslint jest jest-junit npm-check-updates projen ts-jest ts-node typescript aws-cdk-lib constructs",
        },
        Object {
          "exec": "npx projen",
        },
        Object {
          "spawn": "post-upgrade",
        },
      ],
    },
    "watch": Object {
      "description": "Watches changes in your source code and rebuilds and deploys to the current account",
      "name": "watch",
      "steps": Array [
        Object {
          "exec": "cdk deploy --hotswap",
        },
        Object {
          "exec": "cdk watch",
        },
      ],
    },
  },
}
`;

exports[`validate generated project files services/foo/README.md 1`] = `"# replace this"`;

exports[`validate generated project files services/foo/package.json 1`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "dependencies": Object {
    "aws-cdk-lib": "^2.94.0",
    "constructs": "^10.0.5",
  },
  "devDependencies": Object {
    "@types/jest": "*",
    "@types/node": "^16",
    "@typescript-eslint/eslint-plugin": "^6",
    "@typescript-eslint/parser": "^6",
    "aws-cdk": "^2.94.0",
    "esbuild": "*",
    "eslint": "^8",
    "eslint-import-resolver-node": "*",
    "eslint-import-resolver-typescript": "*",
    "eslint-plugin-import": "*",
    "jest": "*",
    "jest-junit": "^15",
    "npm-check-updates": "^16",
    "projen": "*",
    "ts-jest": "*",
    "ts-node": "*",
    "typescript": "*",
  },
  "jest": Object {
    "clearMocks": true,
    "collectCoverage": true,
    "coverageDirectory": "coverage",
    "coveragePathIgnorePatterns": Array [
      "/node_modules/",
    ],
    "coverageReporters": Array [
      "json",
      "lcov",
      "clover",
      "cobertura",
      "text",
    ],
    "globals": Object {
      "ts-jest": Object {
        "tsconfig": "tsconfig.dev.json",
      },
    },
    "preset": "ts-jest",
    "reporters": Array [
      "default",
      Array [
        "jest-junit",
        Object {
          "outputDirectory": "test-reports",
        },
      ],
    ],
    "testMatch": Array [
      "<rootDir>/src/**/__tests__/**/*.ts?(x)",
      "<rootDir>/(test|src)/**/*(*.)@(spec|test).ts?(x)",
    ],
    "testPathIgnorePatterns": Array [
      "/node_modules/",
    ],
    "watchPathIgnorePatterns": Array [
      "/node_modules/",
    ],
  },
  "license": "Apache-2.0",
  "name": "foo",
  "scripts": Object {
    "build": "npx projen build",
    "bundle": "npx projen bundle",
    "compile": "npx projen compile",
    "default": "npx projen default",
    "deploy": "npx projen deploy",
    "destroy": "npx projen destroy",
    "diff": "npx projen diff",
    "eslint": "npx projen eslint",
    "package": "npx projen package",
    "post-compile": "npx projen post-compile",
    "post-upgrade": "npx projen post-upgrade",
    "pre-compile": "npx projen pre-compile",
    "projen": "npx projen",
    "synth": "npx projen synth",
    "synth:silent": "npx projen synth:silent",
    "test": "npx projen test",
    "test:watch": "npx projen test:watch",
    "upgrade": "npx projen upgrade",
    "watch": "npx projen watch",
  },
  "version": "0.0.0",
}
`;

exports[`validate generated project files services/foo/src/main.ts 1`] = `
"import { App, Stack, StackProps } from 'aws-cdk-lib';
import { Construct } from 'constructs';

export class MyStack extends Stack {
  constructor(scope: Construct, id: string, props: StackProps = {}) {
    super(scope, id, props);

    // define resources here...
  }
}

// for development, use account/region from cdk cli
const devEnv = {
  account: process.env.CDK_DEFAULT_ACCOUNT,
  region: process.env.CDK_DEFAULT_REGION,
};

const app = new App();

new MyStack(app, 'foo-dev', { env: devEnv });
// new MyStack(app, 'foo-prod', { env: prodEnv });

app.synth();"
`;

exports[`validate generated project files services/foo/test/main.test.ts 1`] = `
"import { App } from 'aws-cdk-lib';
import { Template } from 'aws-cdk-lib/assertions';
import { MyStack } from '../src/main';

test('Snapshot', () => {
  const app = new App();
  const stack = new MyStack(app, 'test');

  const template = Template.fromStack(stack);
  expect(template.toJSON()).toMatchSnapshot();
});"
`;

exports[`validate generated project files services/foo/tsconfig.dev.json 1`] = `
Object {
  "compilerOptions": Object {
    "alwaysStrict": true,
    "declaration": true,
    "esModuleInterop": true,
    "experimentalDecorators": true,
    "inlineSourceMap": true,
    "inlineSources": true,
    "lib": Array [
      "es2019",
    ],
    "module": "CommonJS",
    "noEmitOnError": false,
    "noFallthroughCasesInSwitch": true,
    "noImplicitAny": true,
    "noImplicitReturns": true,
    "noImplicitThis": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "resolveJsonModule": true,
    "strict": true,
    "strictNullChecks": true,
    "strictPropertyInitialization": true,
    "stripInternal": true,
    "target": "ES2019",
  },
  "exclude": Array [
    "node_modules",
  ],
  "include": Array [
    ".projenrc.js",
    "src/**/*.ts",
    "test/**/*.ts",
  ],
}
`;

exports[`validate generated project files services/foo/tsconfig.json 1`] = `
Object {
  "compilerOptions": Object {
    "alwaysStrict": true,
    "declaration": true,
    "esModuleInterop": true,
    "experimentalDecorators": true,
    "inlineSourceMap": true,
    "inlineSources": true,
    "lib": Array [
      "es2019",
    ],
    "module": "CommonJS",
    "noEmitOnError": false,
    "noFallthroughCasesInSwitch": true,
    "noImplicitAny": true,
    "noImplicitReturns": true,
    "noImplicitThis": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "outDir": "lib",
    "resolveJsonModule": true,
    "rootDir": "src",
    "strict": true,
    "strictNullChecks": true,
    "strictPropertyInitialization": true,
    "stripInternal": true,
    "target": "ES2019",
  },
  "exclude": Array [
    "cdk.out",
  ],
  "include": Array [
    "src/**/*.ts",
  ],
}
`;
