// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`validate generated project files .eslintrc.json 1`] = `
Object {
  "env": Object {
    "jest": true,
    "node": true,
  },
  "extends": Array [
    "plugin:import/typescript",
    "prettier",
    "plugin:prettier/recommended",
  ],
  "ignorePatterns": Array [
    "*.js",
    "*.d.ts",
    "node_modules/",
    "*.generated.ts",
    "coverage",
  ],
  "overrides": Array [],
  "parser": "@typescript-eslint/parser",
  "parserOptions": Object {
    "ecmaVersion": 2018,
    "project": "./**/tsconfig.dev.json",
    "sourceType": "module",
  },
  "plugins": Array [
    "@typescript-eslint",
    "import",
    "prettier",
  ],
  "root": true,
  "rules": Object {
    "@typescript-eslint/member-ordering": Array [
      "error",
      Object {
        "default": Array [
          "public-static-field",
          "public-static-method",
          "protected-static-field",
          "protected-static-method",
          "private-static-field",
          "private-static-method",
          "field",
          "constructor",
          "method",
        ],
      },
    ],
    "@typescript-eslint/no-floating-promises": Array [
      "error",
    ],
    "@typescript-eslint/no-require-imports": Array [
      "error",
    ],
    "@typescript-eslint/no-shadow": Array [
      "error",
    ],
    "@typescript-eslint/return-await": Array [
      "error",
    ],
    "dot-notation": Array [
      "error",
    ],
    "import/no-extraneous-dependencies": Array [
      "error",
      Object {
        "devDependencies": Array [
          "**/test/**",
          "**/build-tools/**",
        ],
        "optionalDependencies": false,
        "peerDependencies": true,
      },
    ],
    "import/no-unresolved": Array [
      "error",
    ],
    "import/order": Array [
      "warn",
      Object {
        "alphabetize": Object {
          "caseInsensitive": true,
          "order": "asc",
        },
        "groups": Array [
          "builtin",
          "external",
        ],
      },
    ],
    "key-spacing": Array [
      "error",
    ],
    "no-bitwise": Array [
      "error",
    ],
    "no-duplicate-imports": Array [
      "error",
    ],
    "no-multiple-empty-lines": Array [
      "error",
    ],
    "no-return-await": Array [
      "off",
    ],
    "no-shadow": Array [
      "off",
    ],
    "no-trailing-spaces": Array [
      "error",
    ],
    "prettier/prettier": Array [
      "error",
    ],
  },
  "settings": Object {
    "import/parsers": Object {
      "@typescript-eslint/parser": Array [
        ".ts",
        ".tsx",
      ],
    },
    "import/resolver": Object {
      "node": Object {},
      "typescript": Object {
        "alwaysTryTypes": true,
        "project": "./**/tsconfig.dev.json",
      },
    },
  },
}
`;

exports[`validate generated project files .gitattributes 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

/.eslintrc.json linguist-generated
/.gitattributes linguist-generated
/.gitignore linguist-generated
/.npmignore linguist-generated
/.npmrc linguist-generated
/.prettierignore linguist-generated
/.prettierrc.json linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/package.json linguist-generated
/pnpm-lock.yaml linguist-generated
/tsconfig.dev.json linguist-generated
/tsconfig.json linguist-generated"
`;

exports[`validate generated project files .github/workflows/deploy.yml 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.ts and run \\"npx projen\\".

name: deploy
on:
  push:
    branches:
      - feature/*
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    concurrency: build
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with: {}
      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.4
        with:
          version: \\"8\\"
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: latest
          cache: pnpm
      - name: Install dependencies
        run: pnpm i --frozen-lockfile
      - name: build
        run: npx projen build
      - name: Backup artifact permissions for \\"sites/my-site/.vitepress/dist\\"
        run: getfacl -R . > permissions-backup.acl
        continue-on-error: true
        working-directory: sites/my-site/.vitepress/dist
      - name: Upload artifacts for \\"sites/my-site/.vitepress/dist\\"
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact-e3157ffc
          path: sites/my-site/.vitepress/dist
  deploy-my-site-to-us-east:
    name: Deploy my-site to us-east
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    concurrency: deploy-my-site-to-us-east
    env:
      CI: \\"true\\"
    if: startsWith( github.ref, 'refs/heads/feature' )
    steps:
      - name: Download build artifacts for \\"sites/my-site/.vitepress/dist\\"
        uses: actions/download-artifact@v3
        with:
          name: build-artifact-e3157ffc
          path: sites/my-site/.vitepress/dist
      - name: Restore build artifact permissions for \\"sites/my-site/.vitepress/dist\\"
        run: setfacl --restore=permissions-backup.acl
        continue-on-error: true
        working-directory: sites/my-site/.vitepress/dist
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: latest
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::0000000000:role/GitHubDeploymentOIDCRole
          aws-region: us-east-1
          role-duration-seconds: 900
"
`;

exports[`validate generated project files .gitignore 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/.npmignore
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/.projenrc.js
/test-reports/
junit.xml
/coverage/
!/.prettierignore
!/.prettierrc.json
!/.npmrc
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.eslintrc.json
.vitepress/dist
.vitepress/cache
"
`;

exports[`validate generated project files .npmignore 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
/.projen/
/test-reports/
junit.xml
/coverage/
/test/
/tsconfig.dev.json
/src/
!/lib/
!/lib/**/*.js
!/lib/**/*.d.ts
dist
/tsconfig.json
/.github/
/.vscode/
/.idea/
/.projenrc.js
tsconfig.tsbuildinfo
/.eslintrc.json
"
`;

exports[`validate generated project files .npmrc 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

resolution-mode=highest
"
`;

exports[`validate generated project files .prettierignore 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
"
`;

exports[`validate generated project files .prettierrc.json 1`] = `
Object {
  "overrides": Array [],
}
`;

exports[`validate generated project files .projen/deps.json 1`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "dependencies": Array [
    Object {
      "name": "@types/jest",
      "type": "build",
    },
    Object {
      "name": "@types/node",
      "type": "build",
      "version": "^16",
    },
    Object {
      "name": "@typescript-eslint/eslint-plugin",
      "type": "build",
      "version": "^6",
    },
    Object {
      "name": "@typescript-eslint/parser",
      "type": "build",
      "version": "^6",
    },
    Object {
      "name": "constructs",
      "type": "build",
      "version": "^10.0.0",
    },
    Object {
      "name": "eslint-config-prettier",
      "type": "build",
    },
    Object {
      "name": "eslint-import-resolver-node",
      "type": "build",
    },
    Object {
      "name": "eslint-import-resolver-typescript",
      "type": "build",
    },
    Object {
      "name": "eslint-plugin-import",
      "type": "build",
    },
    Object {
      "name": "eslint-plugin-prettier",
      "type": "build",
    },
    Object {
      "name": "eslint",
      "type": "build",
      "version": "^8",
    },
    Object {
      "name": "jest",
      "type": "build",
    },
    Object {
      "name": "jest-junit",
      "type": "build",
      "version": "^15",
    },
    Object {
      "name": "npm-check-updates",
      "type": "build",
      "version": "^16",
    },
    Object {
      "name": "prettier",
      "type": "build",
    },
    Object {
      "name": "projen",
      "type": "build",
    },
    Object {
      "name": "ts-jest",
      "type": "build",
    },
    Object {
      "name": "typescript",
      "type": "build",
    },
    Object {
      "name": "vitepress",
      "type": "build",
    },
  ],
}
`;

exports[`validate generated project files .projen/files.json 1`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "files": Array [
    ".eslintrc.json",
    ".gitattributes",
    ".gitignore",
    ".npmignore",
    ".npmrc",
    ".prettierignore",
    ".prettierrc.json",
    ".projen/deps.json",
    ".projen/files.json",
    ".projen/tasks.json",
    "tsconfig.dev.json",
    "tsconfig.json",
  ],
}
`;

exports[`validate generated project files .projen/tasks.json 1`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "env": Object {
    "PATH": "$(pnpm -c exec \\"node --print process.env.PATH\\")",
  },
  "tasks": Object {
    "build": Object {
      "description": "Full release build",
      "name": "build",
      "steps": Array [
        Object {
          "spawn": "pre-compile",
        },
        Object {
          "spawn": "compile",
        },
        Object {
          "spawn": "post-compile",
        },
        Object {
          "spawn": "test",
        },
        Object {
          "spawn": "package",
        },
      ],
    },
    "compile": Object {
      "description": "Only compile",
      "name": "compile",
      "steps": Array [
        Object {
          "exec": "tsc --build",
        },
      ],
    },
    "default": Object {
      "description": "Synthesize project files",
      "name": "default",
    },
    "docs:build": Object {
      "name": "docs:build",
      "steps": Array [
        Object {
          "exec": "pnpm vitepress build",
        },
      ],
    },
    "docs:dev": Object {
      "name": "docs:dev",
      "steps": Array [
        Object {
          "exec": "pnpm vitepress dev",
        },
      ],
    },
    "docs:preview": Object {
      "name": "docs:preview",
      "steps": Array [
        Object {
          "exec": "pnpm vitepress preview",
        },
      ],
    },
    "docs:test": Object {
      "name": "docs:test",
      "steps": Array [
        Object {
          "exec": "echo 'docs:test does nothing yet'",
        },
      ],
    },
    "eslint": Object {
      "description": "Runs eslint against the codebase",
      "name": "eslint",
      "steps": Array [
        Object {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools",
        },
      ],
    },
    "install": Object {
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "name": "install",
      "steps": Array [
        Object {
          "exec": "pnpm i --no-frozen-lockfile",
        },
      ],
    },
    "install:ci": Object {
      "description": "Install project dependencies using frozen lockfile",
      "name": "install:ci",
      "steps": Array [
        Object {
          "exec": "pnpm i --frozen-lockfile",
        },
      ],
    },
    "package": Object {
      "description": "Creates the distribution package",
      "name": "package",
    },
    "post-compile": Object {
      "description": "Runs after successful compilation",
      "name": "post-compile",
    },
    "post-upgrade": Object {
      "description": "Runs after upgrading dependencies",
      "name": "post-upgrade",
    },
    "pre-compile": Object {
      "description": "Prepare the project for compilation",
      "name": "pre-compile",
    },
    "test": Object {
      "description": "Run tests",
      "name": "test",
      "steps": Array [
        Object {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true,
        },
        Object {
          "spawn": "eslint",
        },
      ],
    },
    "test:watch": Object {
      "description": "Run jest in watch mode",
      "name": "test:watch",
      "steps": Array [
        Object {
          "exec": "jest --watch",
        },
      ],
    },
    "upgrade": Object {
      "description": "upgrade dependencies",
      "env": Object {
        "CI": "0",
      },
      "name": "upgrade",
      "steps": Array [
        Object {
          "exec": "pnpm update npm-check-updates",
        },
        Object {
          "exec": "npm-check-updates --upgrade --target=minor --peer --dep=dev,peer,prod,optional --filter=@types/jest,@types/node,@typescript-eslint/eslint-plugin,@typescript-eslint/parser,constructs,eslint-config-prettier,eslint-import-resolver-node,eslint-import-resolver-typescript,eslint-plugin-import,eslint-plugin-prettier,eslint,jest,jest-junit,npm-check-updates,prettier,projen,ts-jest,typescript,vitepress",
        },
        Object {
          "exec": "pnpm i --no-frozen-lockfile",
        },
        Object {
          "exec": "pnpm update @types/jest @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser constructs eslint-config-prettier eslint-import-resolver-node eslint-import-resolver-typescript eslint-plugin-import eslint-plugin-prettier eslint jest jest-junit npm-check-updates prettier projen ts-jest typescript vitepress",
        },
        Object {
          "exec": "npx projen",
        },
        Object {
          "spawn": "post-upgrade",
        },
      ],
    },
    "watch": Object {
      "description": "Watch & compile in the background",
      "name": "watch",
      "steps": Array [
        Object {
          "exec": "tsc --build -w",
        },
      ],
    },
  },
}
`;

exports[`validate generated project files .projen/tasks.json 2`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \\"npx projen\\".",
  "env": Object {
    "PATH": "$(pnpm -c exec \\"node --print process.env.PATH\\")",
  },
  "tasks": Object {
    "build": Object {
      "description": "Full release build",
      "name": "build",
      "steps": Array [
        Object {
          "spawn": "default",
        },
        Object {
          "spawn": "pre-compile",
        },
        Object {
          "spawn": "compile",
        },
        Object {
          "spawn": "post-compile",
        },
        Object {
          "spawn": "test",
        },
        Object {
          "spawn": "package",
        },
      ],
    },
    "bump": Object {
      "condition": "! git log --oneline -1 | grep -q \\"chore(release):\\"",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": Object {
        "BUMPFILE": "dist/version.txt",
        "CHANGELOG": "dist/changelog.md",
        "OUTFILE": "package.json",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
      },
      "name": "bump",
      "steps": Array [
        Object {
          "builtin": "release/bump-version",
        },
      ],
    },
    "clobber": Object {
      "condition": "git diff --exit-code > /dev/null",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": Object {
        "BRANCH": "$(git branch --show-current)",
      },
      "name": "clobber",
      "steps": Array [
        Object {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \\"scratch\\" branch",
        },
        Object {
          "exec": "git checkout $BRANCH",
        },
        Object {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin",
        },
        Object {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit",
        },
        Object {
          "exec": "git clean -fdx",
          "name": "clean all untracked files",
        },
        Object {
          "say": "ready to rock! (unpushed commits are under the \\"scratch\\" branch)",
        },
      ],
    },
    "compile": Object {
      "description": "Only compile",
      "name": "compile",
      "steps": Array [
        Object {
          "exec": "tsc --build",
        },
      ],
    },
    "default": Object {
      "description": "Synthesize project files",
      "name": "default",
      "steps": Array [
        Object {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts",
        },
        Object {
          "spawn": "eslint",
        },
        Object {
          "spawn": "turbo:eslint",
        },
      ],
    },
    "eject": Object {
      "description": "Remove projen from the project",
      "env": Object {
        "PROJEN_EJECTING": "true",
      },
      "name": "eject",
      "steps": Array [
        Object {
          "spawn": "default",
        },
      ],
    },
    "eslint": Object {
      "description": "Runs eslint against the codebase",
      "name": "eslint",
      "steps": Array [
        Object {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools projenrc .projenrc.ts",
        },
      ],
    },
    "install": Object {
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "name": "install",
      "steps": Array [
        Object {
          "exec": "pnpm i --no-frozen-lockfile",
        },
      ],
    },
    "install:ci": Object {
      "description": "Install project dependencies using frozen lockfile",
      "name": "install:ci",
      "steps": Array [
        Object {
          "exec": "pnpm i --frozen-lockfile",
        },
      ],
    },
    "package": Object {
      "description": "Creates the distribution package",
      "name": "package",
    },
    "post-compile": Object {
      "description": "Runs after successful compilation",
      "name": "post-compile",
      "steps": Array [
        Object {
          "spawn": "turbo:build",
        },
      ],
    },
    "post-upgrade": Object {
      "description": "Runs after upgrading dependencies",
      "name": "post-upgrade",
    },
    "pre-compile": Object {
      "description": "Prepare the project for compilation",
      "name": "pre-compile",
    },
    "release": Object {
      "description": "Prepare a release from \\"main\\" branch",
      "env": Object {
        "RELEASE": "true",
      },
      "name": "release",
      "steps": Array [
        Object {
          "exec": "rm -fr dist",
        },
        Object {
          "spawn": "bump",
        },
        Object {
          "spawn": "build",
        },
        Object {
          "spawn": "unbump",
        },
        Object {
          "exec": "git diff --ignore-space-at-eol --exit-code",
        },
      ],
    },
    "test": Object {
      "description": "Run tests",
      "name": "test",
      "steps": Array [
        Object {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true,
        },
        Object {
          "spawn": "eslint",
        },
      ],
    },
    "test:watch": Object {
      "description": "Run jest in watch mode",
      "name": "test:watch",
      "steps": Array [
        Object {
          "exec": "jest --watch",
        },
      ],
    },
    "turbo:build": Object {
      "description": "Builds all subprojects",
      "name": "turbo:build",
      "steps": Array [
        Object {
          "exec": "pnpm turbo turbo:build",
        },
      ],
    },
    "turbo:eslint": Object {
      "description": "Lint all repos",
      "name": "turbo:eslint",
      "steps": Array [
        Object {
          "exec": "pnpm turbo eslint",
        },
      ],
    },
    "unbump": Object {
      "description": "Restores version to 0.0.0",
      "env": Object {
        "BUMPFILE": "dist/version.txt",
        "CHANGELOG": "dist/changelog.md",
        "OUTFILE": "package.json",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
      },
      "name": "unbump",
      "steps": Array [
        Object {
          "builtin": "release/reset-version",
        },
      ],
    },
    "upgrade": Object {
      "description": "upgrade dependencies",
      "env": Object {
        "CI": "0",
      },
      "name": "upgrade",
      "steps": Array [
        Object {
          "exec": "pnpm update npm-check-updates",
        },
        Object {
          "exec": "npm-check-updates --upgrade --target=minor --peer --dep=dev,peer,prod,optional --filter=@types/jest,@types/node,@typescript-eslint/eslint-plugin,@typescript-eslint/parser,constructs,eslint-config-prettier,eslint-import-resolver-node,eslint-import-resolver-typescript,eslint-plugin-import,eslint-plugin-prettier,eslint,jest,jest-junit,npm-check-updates,prettier,projen,standard-version,ts-jest,ts-node,turbo,typescript,@sumoc/fracture",
        },
        Object {
          "exec": "pnpm i --no-frozen-lockfile",
        },
        Object {
          "exec": "pnpm update @types/jest @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser constructs eslint-config-prettier eslint-import-resolver-node eslint-import-resolver-typescript eslint-plugin-import eslint-plugin-prettier eslint jest jest-junit npm-check-updates prettier projen standard-version ts-jest ts-node turbo typescript @sumoc/fracture",
        },
        Object {
          "exec": "npx projen",
        },
        Object {
          "spawn": "post-upgrade",
        },
      ],
    },
    "watch": Object {
      "description": "Watch & compile in the background",
      "name": "watch",
      "steps": Array [
        Object {
          "exec": "tsc --build -w",
        },
      ],
    },
  },
}
`;

exports[`validate generated project files .vitepress/config.mts 1`] = `
"import { defineConfig } from \\"vitepress\\";

// https://vitepress.dev/reference/site-config
export default defineConfig({
  srcDir: \\"./src\\",
  title: \\"My Awesome Project\\",
  description: \\"A VitePress Site\\",
  themeConfig: {
    // https://vitepress.dev/reference/default-theme-config
    nav: [
      { text: \\"Home\\", link: \\"/\\" },
      { text: \\"Examples\\", link: \\"/markdown-examples\\" },
    ],

    sidebar: [
      {
        text: \\"Examples\\",
        items: [
          { text: \\"Markdown Examples\\", link: \\"/markdown-examples\\" },
          { text: \\"Runtime API Examples\\", link: \\"/api-examples\\" },
        ],
      },
    ],

    socialLinks: [
      { icon: \\"github\\", link: \\"https://github.com/vuejs/vitepress\\" },
    ],
  },
});
"
`;

exports[`validate generated project files .vitepress/theme/Layout.vue 1`] = `
"<script setup lang=\\"ts\\">
import { useData } from \\"vitepress\\";

// https://vitepress.dev/reference/runtime-api#usedata
const { site, frontmatter } = useData();
</script>

<template>
  <div v-if=\\"frontmatter.home\\">
    <h1>{{ site.title }}</h1>
    <p>{{ site.description }}</p>
    <ul>
      <li><a href=\\"/markdown-examples.html\\">Markdown Examples</a></li>
      <li><a href=\\"/api-examples.html\\">API Examples</a></li>
    </ul>
  </div>
  <div v-else>
    <a href=\\"/\\">Home</a>
    <Content />
  </div>
</template>
"
`;

exports[`validate generated project files .vitepress/theme/index.ts 1`] = `
"// https://vitepress.dev/guide/custom-theme
import { h } from 'vue'
import Theme from 'vitepress/theme'
import './style.css'

export default {
  extends: Theme,
  Layout: () => {
    return h(Theme.Layout, null, {
      // https://vitepress.dev/guide/extending-default-theme#layout-slots
    })
  },
  enhanceApp({ app, router, siteData }) {
    // ...
  }
}
"
`;

exports[`validate generated project files .vitepress/theme/style.css 1`] = `
"/**
 * Customize default theme styling by overriding CSS variables:
 * https://github.com/vuejs/vitepress/blob/main/src/client/theme-default/styles/vars.css
 */

/**
 * Colors
 *
 * Each colors have exact same color scale system with 3 levels of solid
 * colors with different brightness, and 1 soft color.
 * 
 * - \`XXX-1\`: The most solid color used mainly for colored text. It must
 *   satisfy the contrast ratio against when used on top of \`XXX-soft\`.
 *
 * - \`XXX-2\`: The color used mainly for hover state of the button.
 *
 * - \`XXX-3\`: The color for solid background, such as bg color of the button.
 *   It must satisfy the contrast ratio with pure white (#ffffff) text on
 *   top of it.
 *
 * - \`XXX-soft\`: The color used for subtle background such as custom container
 *   or badges. It must satisfy the contrast ratio when putting \`XXX-1\` colors
 *   on top of it.
 *
 *   The soft color must be semi transparent alpha channel. This is crucial
 *   because it allows adding multiple \\"soft\\" colors on top of each other
 *   to create a accent, such as when having inline code block inside
 *   custom containers.
 *
 * - \`default\`: The color used purely for subtle indication without any
 *   special meanings attched to it such as bg color for menu hover state.
 *
 * - \`brand\`: Used for primary brand colors, such as link text, button with
 *   brand theme, etc.
 *
 * - \`tip\`: Used to indicate useful information. The default theme uses the
 *   brand color for this by default.
 *
 * - \`warning\`: Used to indicate warning to the users. Used in custom
 *   container, badges, etc.
 *
 * - \`danger\`: Used to show error, or dangerous message to the users. Used
 *   in custom container, badges, etc.
 * -------------------------------------------------------------------------- */

 :root {
  --vp-c-default-1: var(--vp-c-gray-1);
  --vp-c-default-2: var(--vp-c-gray-2);
  --vp-c-default-3: var(--vp-c-gray-3);
  --vp-c-default-soft: var(--vp-c-gray-soft);

  --vp-c-brand-1: var(--vp-c-indigo-1);
  --vp-c-brand-2: var(--vp-c-indigo-2);
  --vp-c-brand-3: var(--vp-c-indigo-3);
  --vp-c-brand-soft: var(--vp-c-indigo-soft);

  --vp-c-tip-1: var(--vp-c-brand-1);
  --vp-c-tip-2: var(--vp-c-brand-2);
  --vp-c-tip-3: var(--vp-c-brand-3);
  --vp-c-tip-soft: var(--vp-c-brand-soft);

  --vp-c-warning-1: var(--vp-c-yellow-1);
  --vp-c-warning-2: var(--vp-c-yellow-2);
  --vp-c-warning-3: var(--vp-c-yellow-3);
  --vp-c-warning-soft: var(--vp-c-yellow-soft);

  --vp-c-danger-1: var(--vp-c-red-1);
  --vp-c-danger-2: var(--vp-c-red-2);
  --vp-c-danger-3: var(--vp-c-red-3);
  --vp-c-danger-soft: var(--vp-c-red-soft);
}

/**
 * Component: Button
 * -------------------------------------------------------------------------- */

:root {
  --vp-button-brand-border: transparent;
  --vp-button-brand-text: var(--vp-c-white);
  --vp-button-brand-bg: var(--vp-c-brand-3);
  --vp-button-brand-hover-border: transparent;
  --vp-button-brand-hover-text: var(--vp-c-white);
  --vp-button-brand-hover-bg: var(--vp-c-brand-2);
  --vp-button-brand-active-border: transparent;
  --vp-button-brand-active-text: var(--vp-c-white);
  --vp-button-brand-active-bg: var(--vp-c-brand-1);
}

/**
 * Component: Home
 * -------------------------------------------------------------------------- */

:root {
  --vp-home-hero-name-color: transparent;
  --vp-home-hero-name-background: -webkit-linear-gradient(
    120deg,
    #bd34fe 30%,
    #41d1ff
  );

  --vp-home-hero-image-background-image: linear-gradient(
    -45deg,
    #bd34fe 50%,
    #47caff 50%
  );
  --vp-home-hero-image-filter: blur(40px);
}

@media (min-width: 640px) {
  :root {
    --vp-home-hero-image-filter: blur(56px);
  }
}

@media (min-width: 960px) {
  :root {
    --vp-home-hero-image-filter: blur(72px);
  }
}

/**
 * Component: Custom Block
 * -------------------------------------------------------------------------- */

:root {
  --vp-custom-block-tip-border: transparent;
  --vp-custom-block-tip-text: var(--vp-c-text-1);
  --vp-custom-block-tip-bg: var(--vp-c-brand-soft);
  --vp-custom-block-tip-code-bg: var(--vp-c-brand-soft);
}

/**
 * Component: Algolia
 * -------------------------------------------------------------------------- */

.DocSearch {
  --docsearch-primary-color: var(--vp-c-brand-1) !important;
}

"
`;

exports[`validate generated project files Detect new files 1`] = `
Array [
  ".eslintrc.json",
  ".gitattributes",
  ".gitignore",
  ".npmignore",
  ".npmrc",
  ".prettierignore",
  ".prettierrc.json",
  ".projen/deps.json",
  ".projen/files.json",
  ".projen/tasks.json",
  ".vitepress/config.mts",
  ".vitepress/theme/index.ts",
  ".vitepress/theme/Layout.vue",
  ".vitepress/theme/style.css",
  "package.json",
  "README.md",
  "src/api-examples.md",
  "src/index.md",
  "src/index.ts",
  "src/markdown-examples.md",
  "test/hello.test.ts",
  "tsconfig.dev.json",
  "tsconfig.json",
]
`;

exports[`validate generated project files README.md 1`] = `"# replace this"`;

exports[`validate generated project files package.json 1`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "devDependencies": Object {
    "@types/jest": "*",
    "@types/node": "^16",
    "@typescript-eslint/eslint-plugin": "^6",
    "@typescript-eslint/parser": "^6",
    "constructs": "^10.0.0",
    "eslint": "^8",
    "eslint-config-prettier": "*",
    "eslint-import-resolver-node": "*",
    "eslint-import-resolver-typescript": "*",
    "eslint-plugin-import": "*",
    "eslint-plugin-prettier": "*",
    "jest": "*",
    "jest-junit": "^15",
    "npm-check-updates": "^16",
    "prettier": "*",
    "projen": "*",
    "ts-jest": "*",
    "typescript": "*",
    "vitepress": "*",
  },
  "jest": Object {
    "clearMocks": true,
    "collectCoverage": true,
    "coverageDirectory": "coverage",
    "coveragePathIgnorePatterns": Array [
      "/node_modules/",
    ],
    "coverageReporters": Array [
      "json",
      "lcov",
      "clover",
      "cobertura",
      "text",
    ],
    "globals": Object {
      "ts-jest": Object {
        "tsconfig": "tsconfig.dev.json",
      },
    },
    "preset": "ts-jest",
    "reporters": Array [
      "default",
      Array [
        "jest-junit",
        Object {
          "outputDirectory": "test-reports",
        },
      ],
    ],
    "testMatch": Array [
      "<rootDir>/src/**/__tests__/**/*.ts?(x)",
      "<rootDir>/(test|src)/**/*(*.)@(spec|test).ts?(x)",
    ],
    "testPathIgnorePatterns": Array [
      "/node_modules/",
    ],
    "watchPathIgnorePatterns": Array [
      "/node_modules/",
    ],
  },
  "license": "UNLICENSED",
  "main": "lib/index.js",
  "name": "my-site",
  "scripts": Object {
    "build": "npx projen build",
    "compile": "npx projen compile",
    "default": "npx projen default",
    "docs:build": "npx projen docs:build",
    "docs:dev": "npx projen docs:dev",
    "docs:preview": "npx projen docs:preview",
    "docs:test": "npx projen docs:test",
    "eslint": "npx projen eslint",
    "package": "npx projen package",
    "post-compile": "npx projen post-compile",
    "post-upgrade": "npx projen post-upgrade",
    "pre-compile": "npx projen pre-compile",
    "projen": "npx projen",
    "test": "npx projen test",
    "test:watch": "npx projen test:watch",
    "upgrade": "npx projen upgrade",
    "watch": "npx projen watch",
  },
  "types": "lib/index.d.ts",
  "version": "0.0.0",
}
`;

exports[`validate generated project files src/api-examples.md 1`] = `
"---
outline: deep
---

# Runtime API Examples

This page demonstrates usage of some of the runtime APIs provided by VitePress.

The main \`useData()\` API can be used to access site, theme, and page data for the current page. It works in both \`.md\` and \`.vue\` files:

\`\`\`md
<script setup>
import { useData } from 'vitepress'

const { theme, page, frontmatter } = useData()
</script>

## Results

### Theme Data
<pre>{{ theme }}</pre>

### Page Data
<pre>{{ page }}</pre>

### Page Frontmatter
<pre>{{ frontmatter }}</pre>
\`\`\`

<script setup>
import { useData } from 'vitepress'

const { site, theme, page, frontmatter } = useData()
</script>

## Results

### Theme Data
<pre>{{ theme }}</pre>

### Page Data
<pre>{{ page }}</pre>

### Page Frontmatter
<pre>{{ frontmatter }}</pre>

## More

Check out the documentation for the [full list of runtime APIs](https://vitepress.dev/reference/runtime-api#usedata).
"
`;

exports[`validate generated project files src/index.md 1`] = `
"---
# https://vitepress.dev/reference/default-theme-home-page
layout: home

hero:
  name: \\"My Awesome Project\\"
  text: \\"A VitePress Site\\"
  tagline: My great project tagline
  actions:
    - theme: brand
      text: Markdown Examples
      link: /markdown-examples
    - theme: alt
      text: API Examples
      link: /api-examples

features:
  - title: Feature A
    details: Lorem ipsum dolor sit amet, consectetur adipiscing elit
  - title: Feature B
    details: Lorem ipsum dolor sit amet, consectetur adipiscing elit
  - title: Feature C
    details: Lorem ipsum dolor sit amet, consectetur adipiscing elit
---

"
`;

exports[`validate generated project files src/index.ts 1`] = `
"export class Hello {
  public sayHello() {
    return 'hello, world!';
  }
}"
`;

exports[`validate generated project files src/markdown-examples.md 1`] = `
"# Markdown Extension Examples

This page demonstrates some of the built-in markdown extensions provided by VitePress.

## Syntax Highlighting

VitePress provides Syntax Highlighting powered by [Shiki](https://github.com/shikijs/shiki), with additional features like line-highlighting:

**Input**

\`\`\`\`
\`\`\`js{4}
export default {
  data () {
    return {
      msg: 'Highlighted!'
    }
  }
}
\`\`\`
\`\`\`\`

**Output**

\`\`\`js{4}
export default {
  data () {
    return {
      msg: 'Highlighted!'
    }
  }
}
\`\`\`

## Custom Containers

**Input**

\`\`\`md
::: info
This is an info box.
:::

::: tip
This is a tip.
:::

::: warning
This is a warning.
:::

::: danger
This is a dangerous warning.
:::

::: details
This is a details block.
:::
\`\`\`

**Output**

::: info
This is an info box.
:::

::: tip
This is a tip.
:::

::: warning
This is a warning.
:::

::: danger
This is a dangerous warning.
:::

::: details
This is a details block.
:::

## More

Check out the documentation for the [full list of markdown extensions](https://vitepress.dev/guide/markdown).
"
`;

exports[`validate generated project files test/hello.test.ts 1`] = `
"import { Hello } from '../src';

test('hello', () => {
  expect(new Hello().sayHello()).toBe('hello, world!');
});"
`;

exports[`validate generated project files tsconfig.dev.json 1`] = `
Object {
  "compilerOptions": Object {
    "alwaysStrict": true,
    "declaration": true,
    "esModuleInterop": true,
    "experimentalDecorators": true,
    "inlineSourceMap": true,
    "inlineSources": true,
    "lib": Array [
      "es2019",
    ],
    "module": "CommonJS",
    "noEmitOnError": false,
    "noFallthroughCasesInSwitch": true,
    "noImplicitAny": true,
    "noImplicitReturns": true,
    "noImplicitThis": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "resolveJsonModule": true,
    "strict": true,
    "strictNullChecks": true,
    "strictPropertyInitialization": true,
    "stripInternal": true,
    "target": "ES2019",
  },
  "exclude": Array [
    "node_modules",
  ],
  "include": Array [
    ".projenrc.js",
    "src/**/*.ts",
    "test/**/*.ts",
  ],
}
`;

exports[`validate generated project files tsconfig.json 1`] = `
Object {
  "compilerOptions": Object {
    "alwaysStrict": true,
    "declaration": true,
    "esModuleInterop": true,
    "experimentalDecorators": true,
    "inlineSourceMap": true,
    "inlineSources": true,
    "lib": Array [
      "es2019",
    ],
    "module": "CommonJS",
    "noEmitOnError": false,
    "noFallthroughCasesInSwitch": true,
    "noImplicitAny": true,
    "noImplicitReturns": true,
    "noImplicitThis": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "outDir": "lib",
    "resolveJsonModule": true,
    "rootDir": "src",
    "strict": true,
    "strictNullChecks": true,
    "strictPropertyInitialization": true,
    "stripInternal": true,
    "target": "ES2019",
  },
  "exclude": Array [],
  "include": Array [
    "src/**/*.ts",
  ],
}
`;

exports[`validate generated project files turbo.json 1`] = `
Object {
  "$schema": "https://turborepo.org/schema.json",
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \\"npx projen\\".",
  "pipeline": Object {
    "eslint": Object {
      "cache": false,
      "dependsOn": Array [
        "^eslint",
      ],
    },
    "my-site#docs:build": Object {
      "cache": true,
      "outputMode": "new-only",
      "outputs": Array [
        ".vitepress/dist/**",
      ],
    },
    "my-site#docs:test": Object {
      "cache": true,
      "dependsOn": Array [
        "my-site#docs:build",
      ],
      "outputMode": "new-only",
    },
    "turbo:build": Object {
      "dependsOn": Array [
        "my-site#docs:build",
        "my-site#docs:test",
      ],
      "outputMode": "new-only",
    },
  },
}
`;
