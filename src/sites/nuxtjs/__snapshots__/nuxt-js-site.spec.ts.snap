// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`validate generated project files .github/workflows/deploy.yml 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.ts and run \\"npx projen\\".

name: deploy
on:
  push:
    branches:
      - feature/*
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with: {}
      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.4
        with:
          version: \\"8\\"
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: latest
          cache: pnpm
      - name: Install dependencies
        run: pnpm i --frozen-lockfile
      - name: build
        run: npx projen build
      - name: Backup artifact permissions for \\"sites/my-site/dist\\"
        run: getfacl -R . > permissions-backup.acl
        continue-on-error: true
        working-directory: sites/my-site/dist
      - name: Upload artifacts for \\"sites/my-site/dist\\"
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact-80885aea
          path: sites/my-site/dist
  deploy-my-site-from-feature-branch-to-us-east-environment:
    name: Deploy my-site from feature branch to us-east environment
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    concurrency: deploy-us-east
    env:
      CI: \\"true\\"
    if: startsWith( github.ref, 'refs/heads/feature' )
    steps:
      - name: Download build artifacts for \\"sites/my-site/dist\\"
        uses: actions/download-artifact@v3
        with:
          name: build-artifact-80885aea
          path: sites/my-site/dist
      - name: Restore build artifact permissions for \\"sites/my-site/dist\\"
        run: setfacl --restore=permissions-backup.acl
        continue-on-error: true
        working-directory: sites/my-site/dist
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: latest
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::0000000000:role/GitHubDeploymentOIDCRole
          aws-region: us-east-1
          role-duration-seconds: 900
"
`;

exports[`validate generated project files .gitignore 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/package.json
!/.npmignore
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
!/.projenrc.js
/test-reports/
junit.xml
/coverage/
!/.prettierignore
!/.prettierrc.json
!/.npmrc
!/test/
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.eslintrc.json
.output
.data
.nuxt
.nitro
.cache
dist
logs
*.log
.DS_Store
.fleet
.idea
.env
.env.*
!.env.example
!/tsconfig.json
!/server/tsconfig.json
"
`;

exports[`validate generated project files .npmrc 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

resolution-mode=highest
shamefully-hoist=true
"
`;

exports[`validate generated project files .projen/deps.json 1`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "dependencies": Array [
    Object {
      "name": "@nuxt/devtools",
      "type": "build",
      "version": "latest",
    },
    Object {
      "name": "@nuxtjs/tailwindcss",
      "type": "build",
    },
    Object {
      "name": "@types/jest",
      "type": "build",
    },
    Object {
      "name": "@types/node",
      "type": "build",
      "version": "^18.17.3",
    },
    Object {
      "name": "@typescript-eslint/eslint-plugin",
      "type": "build",
      "version": "^6",
    },
    Object {
      "name": "@typescript-eslint/parser",
      "type": "build",
      "version": "^6",
    },
    Object {
      "name": "eslint-config-prettier",
      "type": "build",
    },
    Object {
      "name": "eslint-import-resolver-node",
      "type": "build",
    },
    Object {
      "name": "eslint-import-resolver-typescript",
      "type": "build",
    },
    Object {
      "name": "eslint-plugin-import",
      "type": "build",
    },
    Object {
      "name": "eslint-plugin-prettier",
      "type": "build",
    },
    Object {
      "name": "eslint",
      "type": "build",
      "version": "^8",
    },
    Object {
      "name": "jest",
      "type": "build",
    },
    Object {
      "name": "jest-junit",
      "type": "build",
      "version": "^15",
    },
    Object {
      "name": "npm-check-updates",
      "type": "build",
      "version": "^16",
    },
    Object {
      "name": "nuxt",
      "type": "build",
      "version": "^3.6.5",
    },
    Object {
      "name": "prettier",
      "type": "build",
    },
    Object {
      "name": "projen",
      "type": "build",
    },
    Object {
      "name": "tailwindcss",
      "type": "build",
    },
    Object {
      "name": "ts-jest",
      "type": "build",
    },
    Object {
      "name": "typescript",
      "type": "build",
    },
    Object {
      "name": "@headlessui/vue",
      "type": "runtime",
    },
    Object {
      "name": "@heroicons/vue",
      "type": "runtime",
    },
  ],
}
`;

exports[`validate generated project files .projen/files.json 1`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "files": Array [
    ".eslintrc.json",
    ".gitattributes",
    ".gitignore",
    ".npmignore",
    ".npmrc",
    ".prettierignore",
    ".prettierrc.json",
    ".projen/deps.json",
    ".projen/files.json",
    ".projen/tasks.json",
    "server/tsconfig.json",
    "tsconfig.dev.json",
    "tsconfig.json",
  ],
}
`;

exports[`validate generated project files .projen/tasks.json 1`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "env": Object {
    "PATH": "$(pnpm -c exec \\"node --print process.env.PATH\\")",
  },
  "tasks": Object {
    "build": Object {
      "description": "Full release build",
      "name": "build",
      "steps": Array [
        Object {
          "spawn": "pre-compile",
        },
        Object {
          "spawn": "compile",
        },
        Object {
          "spawn": "post-compile",
        },
        Object {
          "spawn": "test",
        },
        Object {
          "spawn": "package",
        },
      ],
    },
    "compile": Object {
      "description": "Only compile",
      "name": "compile",
      "steps": Array [
        Object {
          "exec": "tsc --build",
        },
      ],
    },
    "default": Object {
      "description": "Synthesize project files",
      "name": "default",
    },
    "eslint": Object {
      "description": "Runs eslint against the codebase",
      "name": "eslint",
      "steps": Array [
        Object {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools",
        },
      ],
    },
    "install": Object {
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "name": "install",
      "steps": Array [
        Object {
          "exec": "pnpm i --no-frozen-lockfile",
        },
      ],
    },
    "install:ci": Object {
      "description": "Install project dependencies using frozen lockfile",
      "name": "install:ci",
      "steps": Array [
        Object {
          "exec": "pnpm i --frozen-lockfile",
        },
      ],
    },
    "nuxt:build": Object {
      "name": "nuxt:build",
      "steps": Array [
        Object {
          "exec": "nuxt build",
        },
      ],
    },
    "nuxt:dev": Object {
      "name": "nuxt:dev",
      "steps": Array [
        Object {
          "exec": "nuxt dev",
        },
      ],
    },
    "nuxt:generate": Object {
      "name": "nuxt:generate",
      "steps": Array [
        Object {
          "exec": "nuxt generate",
        },
      ],
    },
    "nuxt:postinstall": Object {
      "name": "nuxt:postinstall",
      "steps": Array [
        Object {
          "exec": "nuxt prepare",
        },
      ],
    },
    "nuxt:preview": Object {
      "name": "nuxt:preview",
      "steps": Array [
        Object {
          "exec": "nuxt preview",
        },
      ],
    },
    "package": Object {
      "description": "Creates the distribution package",
      "name": "package",
    },
    "post-compile": Object {
      "description": "Runs after successful compilation",
      "name": "post-compile",
    },
    "post-upgrade": Object {
      "description": "Runs after upgrading dependencies",
      "name": "post-upgrade",
    },
    "pre-compile": Object {
      "description": "Prepare the project for compilation",
      "name": "pre-compile",
    },
    "test": Object {
      "description": "Run tests",
      "name": "test",
      "steps": Array [
        Object {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true,
        },
        Object {
          "spawn": "eslint",
        },
      ],
    },
    "test:watch": Object {
      "description": "Run jest in watch mode",
      "name": "test:watch",
      "steps": Array [
        Object {
          "exec": "jest --watch",
        },
      ],
    },
    "upgrade": Object {
      "description": "upgrade dependencies",
      "env": Object {
        "CI": "0",
      },
      "name": "upgrade",
      "steps": Array [
        Object {
          "exec": "pnpm update npm-check-updates",
        },
        Object {
          "exec": "npm-check-updates --upgrade --target=minor --peer --dep=dev,peer,prod,optional --filter=@nuxtjs/tailwindcss,@types/jest,@types/node,@typescript-eslint/eslint-plugin,@typescript-eslint/parser,eslint-config-prettier,eslint-import-resolver-node,eslint-import-resolver-typescript,eslint-plugin-import,eslint-plugin-prettier,eslint,jest,jest-junit,npm-check-updates,nuxt,prettier,projen,tailwindcss,ts-jest,typescript,@headlessui/vue,@heroicons/vue",
        },
        Object {
          "exec": "pnpm i --no-frozen-lockfile",
        },
        Object {
          "exec": "pnpm update @nuxtjs/tailwindcss @types/jest @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint-config-prettier eslint-import-resolver-node eslint-import-resolver-typescript eslint-plugin-import eslint-plugin-prettier eslint jest jest-junit npm-check-updates nuxt prettier projen tailwindcss ts-jest typescript @headlessui/vue @heroicons/vue",
        },
        Object {
          "exec": "npx projen",
        },
        Object {
          "spawn": "post-upgrade",
        },
      ],
    },
    "watch": Object {
      "description": "Watch & compile in the background",
      "name": "watch",
      "steps": Array [
        Object {
          "exec": "tsc --build -w",
        },
      ],
    },
  },
}
`;

exports[`validate generated project files .projen/tasks.json 2`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \\"npx projen\\".",
  "env": Object {
    "PATH": "$(pnpm -c exec \\"node --print process.env.PATH\\")",
  },
  "tasks": Object {
    "build": Object {
      "description": "Full release build",
      "name": "build",
      "steps": Array [
        Object {
          "spawn": "default",
        },
        Object {
          "spawn": "pre-compile",
        },
        Object {
          "spawn": "compile",
        },
        Object {
          "spawn": "post-compile",
        },
        Object {
          "spawn": "test",
        },
        Object {
          "spawn": "package",
        },
      ],
    },
    "bump": Object {
      "condition": "! git log --oneline -1 | grep -q \\"chore(release):\\"",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": Object {
        "BUMPFILE": "dist/version.txt",
        "CHANGELOG": "dist/changelog.md",
        "OUTFILE": "package.json",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
      },
      "name": "bump",
      "steps": Array [
        Object {
          "builtin": "release/bump-version",
        },
      ],
    },
    "clobber": Object {
      "condition": "git diff --exit-code > /dev/null",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": Object {
        "BRANCH": "$(git branch --show-current)",
      },
      "name": "clobber",
      "steps": Array [
        Object {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \\"scratch\\" branch",
        },
        Object {
          "exec": "git checkout $BRANCH",
        },
        Object {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin",
        },
        Object {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit",
        },
        Object {
          "exec": "git clean -fdx",
          "name": "clean all untracked files",
        },
        Object {
          "say": "ready to rock! (unpushed commits are under the \\"scratch\\" branch)",
        },
      ],
    },
    "compile": Object {
      "description": "Only compile",
      "name": "compile",
      "steps": Array [
        Object {
          "exec": "tsc --build",
        },
      ],
    },
    "default": Object {
      "description": "Synthesize project files",
      "name": "default",
      "steps": Array [
        Object {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts",
        },
        Object {
          "spawn": "eslint",
        },
        Object {
          "spawn": "turbo:eslint",
        },
      ],
    },
    "eject": Object {
      "description": "Remove projen from the project",
      "env": Object {
        "PROJEN_EJECTING": "true",
      },
      "name": "eject",
      "steps": Array [
        Object {
          "spawn": "default",
        },
      ],
    },
    "eslint": Object {
      "description": "Runs eslint against the codebase",
      "name": "eslint",
      "steps": Array [
        Object {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools projenrc .projenrc.ts",
        },
      ],
    },
    "install": Object {
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "name": "install",
      "steps": Array [
        Object {
          "exec": "pnpm i --no-frozen-lockfile",
        },
      ],
    },
    "install:ci": Object {
      "description": "Install project dependencies using frozen lockfile",
      "name": "install:ci",
      "steps": Array [
        Object {
          "exec": "pnpm i --frozen-lockfile",
        },
      ],
    },
    "package": Object {
      "description": "Creates the distribution package",
      "name": "package",
    },
    "post-compile": Object {
      "description": "Runs after successful compilation",
      "name": "post-compile",
      "steps": Array [
        Object {
          "spawn": "turbo:build",
        },
      ],
    },
    "post-upgrade": Object {
      "description": "Runs after upgrading dependencies",
      "name": "post-upgrade",
    },
    "pre-compile": Object {
      "description": "Prepare the project for compilation",
      "name": "pre-compile",
    },
    "release": Object {
      "description": "Prepare a release from \\"main\\" branch",
      "env": Object {
        "RELEASE": "true",
      },
      "name": "release",
      "steps": Array [
        Object {
          "exec": "rm -fr dist",
        },
        Object {
          "spawn": "bump",
        },
        Object {
          "spawn": "build",
        },
        Object {
          "spawn": "unbump",
        },
        Object {
          "exec": "git diff --ignore-space-at-eol --exit-code",
        },
      ],
    },
    "test": Object {
      "description": "Run tests",
      "name": "test",
      "steps": Array [
        Object {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true,
        },
        Object {
          "spawn": "eslint",
        },
      ],
    },
    "test:watch": Object {
      "description": "Run jest in watch mode",
      "name": "test:watch",
      "steps": Array [
        Object {
          "exec": "jest --watch",
        },
      ],
    },
    "turbo:build": Object {
      "description": "Builds all subprojects",
      "name": "turbo:build",
      "steps": Array [
        Object {
          "exec": "pnpm turbo turbo:build",
        },
      ],
    },
    "turbo:eslint": Object {
      "description": "Lint all repos",
      "name": "turbo:eslint",
      "steps": Array [
        Object {
          "exec": "pnpm turbo eslint",
        },
      ],
    },
    "unbump": Object {
      "description": "Restores version to 0.0.0",
      "env": Object {
        "BUMPFILE": "dist/version.txt",
        "CHANGELOG": "dist/changelog.md",
        "OUTFILE": "package.json",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
      },
      "name": "unbump",
      "steps": Array [
        Object {
          "builtin": "release/reset-version",
        },
      ],
    },
    "upgrade": Object {
      "description": "upgrade dependencies",
      "env": Object {
        "CI": "0",
      },
      "name": "upgrade",
      "steps": Array [
        Object {
          "exec": "pnpm update npm-check-updates",
        },
        Object {
          "exec": "npm-check-updates --upgrade --target=minor --peer --dep=dev,peer,prod,optional --filter=@types/jest,@types/node,@typescript-eslint/eslint-plugin,@typescript-eslint/parser,eslint-config-prettier,eslint-import-resolver-node,eslint-import-resolver-typescript,eslint-plugin-import,eslint-plugin-prettier,eslint,jest,jest-junit,npm-check-updates,prettier,projen,standard-version,ts-jest,ts-node,turbo,typescript,@sumoc/fracture",
        },
        Object {
          "exec": "pnpm i --no-frozen-lockfile",
        },
        Object {
          "exec": "pnpm update @types/jest @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint-config-prettier eslint-import-resolver-node eslint-import-resolver-typescript eslint-plugin-import eslint-plugin-prettier eslint jest jest-junit npm-check-updates prettier projen standard-version ts-jest ts-node turbo typescript @sumoc/fracture",
        },
        Object {
          "exec": "npx projen",
        },
        Object {
          "spawn": "post-upgrade",
        },
      ],
    },
    "watch": Object {
      "description": "Watch & compile in the background",
      "name": "watch",
      "steps": Array [
        Object {
          "exec": "tsc --build -w",
        },
      ],
    },
  },
}
`;

exports[`validate generated project files Detect new files 1`] = `
Array [
  ".eslintrc.json",
  ".gitattributes",
  ".gitignore",
  ".npmignore",
  ".npmrc",
  ".prettierignore",
  ".prettierrc.json",
  ".projen/deps.json",
  ".projen/files.json",
  ".projen/tasks.json",
  "components/README.md",
  "layouts/default.vue",
  "nuxt.config.ts",
  "package.json",
  "pages/index.vue",
  "plugins/README.md",
  "public/README.md",
  "README.md",
  "server/tsconfig.json",
  "src/index.ts",
  "test/hello.test.ts",
  "tsconfig.dev.json",
  "tsconfig.json",
]
`;

exports[`validate generated project files nuxt.config.ts 1`] = `
"export default defineNuxtConfig({
  devtools: { enabled: true },
});
"
`;

exports[`validate generated project files package.json 1`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "dependencies": Object {
    "@headlessui/vue": "*",
    "@heroicons/vue": "*",
  },
  "devDependencies": Object {
    "@nuxt/devtools": "latest",
    "@nuxtjs/tailwindcss": "*",
    "@types/jest": "*",
    "@types/node": "^18.17.3",
    "@typescript-eslint/eslint-plugin": "^6",
    "@typescript-eslint/parser": "^6",
    "eslint": "^8",
    "eslint-config-prettier": "*",
    "eslint-import-resolver-node": "*",
    "eslint-import-resolver-typescript": "*",
    "eslint-plugin-import": "*",
    "eslint-plugin-prettier": "*",
    "jest": "*",
    "jest-junit": "^15",
    "npm-check-updates": "^16",
    "nuxt": "^3.6.5",
    "prettier": "*",
    "projen": "*",
    "tailwindcss": "*",
    "ts-jest": "*",
    "typescript": "*",
  },
  "jest": Object {
    "clearMocks": true,
    "collectCoverage": true,
    "coverageDirectory": "coverage",
    "coveragePathIgnorePatterns": Array [
      "/node_modules/",
    ],
    "coverageReporters": Array [
      "json",
      "lcov",
      "clover",
      "cobertura",
      "text",
    ],
    "globals": Object {
      "ts-jest": Object {
        "tsconfig": "tsconfig.dev.json",
      },
    },
    "preset": "ts-jest",
    "reporters": Array [
      "default",
      Array [
        "jest-junit",
        Object {
          "outputDirectory": "test-reports",
        },
      ],
    ],
    "testMatch": Array [
      "<rootDir>/src/**/__tests__/**/*.ts?(x)",
      "<rootDir>/(test|src)/**/*(*.)@(spec|test).ts?(x)",
      "<rootDir>/(components|layouts|model|pages|plugins)/**/*(*.)@(spec|test).ts?(x)",
    ],
    "testPathIgnorePatterns": Array [
      "/node_modules/",
    ],
    "watchPathIgnorePatterns": Array [
      "/node_modules/",
    ],
  },
  "license": "UNLICENSED",
  "main": "lib/index.js",
  "name": "my-site",
  "pnpm": Object {},
  "scripts": Object {
    "build": "npx projen build",
    "compile": "npx projen compile",
    "default": "npx projen default",
    "eslint": "npx projen eslint",
    "nuxt:build": "npx projen nuxt:build",
    "nuxt:dev": "npx projen nuxt:dev",
    "nuxt:generate": "npx projen nuxt:generate",
    "nuxt:postinstall": "npx projen nuxt:postinstall",
    "nuxt:preview": "npx projen nuxt:preview",
    "package": "npx projen package",
    "post-compile": "npx projen post-compile",
    "post-upgrade": "npx projen post-upgrade",
    "pre-compile": "npx projen pre-compile",
    "projen": "npx projen",
    "test": "npx projen test",
    "test:watch": "npx projen test:watch",
    "upgrade": "npx projen upgrade",
    "watch": "npx projen watch",
  },
  "types": "lib/index.d.ts",
  "version": "0.0.0",
}
`;

exports[`validate generated project files server/tsconfig.json 1`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "extends": "../.nuxt/tsconfig.server.json",
}
`;

exports[`validate generated project files tsconfig.json 1`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "extends": "./.nuxt/tsconfig.json",
}
`;

exports[`validate generated project files turbo.json 1`] = `
Object {
  "$schema": "https://turborepo.org/schema.json",
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \\"npx projen\\".",
  "pipeline": Object {
    "eslint": Object {
      "cache": false,
      "dependsOn": Array [
        "^eslint",
      ],
    },
    "my-site#nuxt:generate": Object {
      "cache": true,
      "outputMode": "new-only",
      "outputs": Array [
        "dist/**",
      ],
    },
    "turbo:build": Object {
      "dependsOn": Array [
        "my-site#nuxt:generate",
      ],
      "outputMode": "new-only",
    },
  },
}
`;
